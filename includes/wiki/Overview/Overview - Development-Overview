<h3 id='smart-contracts'>Smart Contracts</h3>
<p>Parity Ethereum supports state-orientated programming of <a href="Smart-Contracts.md">Smart Contracts</a> with the Solidity programming language for the Ethereum blockchain. Parity UI contains an integrated Solidity development environment allowing you to write, compile, and deploy contracts.</p>
<h3 id='erc-20-tokens'>ERC-20 Tokens</h3>
<p>The native Ethereum token is called Ether (ETH). In addition to Ether, additional assets and <a href="Tokens.md">Tokens</a> can be handled by the Ethereum blockchain. The Parity Ethereum wallet supports any ERC20-compliant token by displaying balances and enabling transfers to be as simple as Ether transactions. Read more on <a href="Token-Deployment.md">Token Deployment</a> and the Parity <a href="Token-Registry.md">Token Registry</a>.</p>
<h3 id='decentralized-applications'>Decentralized Applications</h3>
<p>For an overview on the development of decentralised applications, you can read <a href="Deploying-Dapps-to-Parity-UI.md">Deploying Dapps to Parity UI</a>, <a href="Register-your-DAPP-for-discovery.md">Dapp Discovery</a> and the <a href="Parity-dapp-registry.md">Parity Dapp Registry</a>. There is a 10-part <a href="Dapp-Tutorial.md">Tutorial</a> on how to write dapps. It makes significant use of React and Bond-based UI technologies together with the Parity counterparts. By the end of it, you&#39;ll have some familiarity with all aspects of dapp-authoring including contract deployment, transaction posting, state-inspection and event-tracking. Examples of common operations and useful functionality when building a dApp using <a href="oo7-Parity-Reference.md">oo7-Bonds</a> can be <a href="oo7-Parity-Examples.md">found here</a>.</p>
<h3 id='development-chains'>Development Chains</h3>
<p>By default, when simply running <code>parity</code>, Parity Ethereum will connect to the Ethereum Mainnet. In order to run a <a href="Chain-specification.md">different chain</a>, Parity has to be run with the <code>--chain</code> option or with a <a href="Configuring-Parity.md#config-file">config file</a> specifying <code>chain = &quot;path&quot;</code> under <code>[parity]</code>. There are a few named presets that can be selected from or a custom JSON spec file can be supplied.</p>

<p>Parity supports <a href="Private-development-chain.md">private chain</a> and private network configuration via <a href="Chain-specification.md">Chain specification</a> files provided with <code>--chain</code>. In addition to the usual <a href="Proof-of-Work-Chains.md">Proof of Work Chains</a>, Parity also includes <a href="Proof-of-Authority-Chains.md">Proof of Authority Chains</a> which do not require mining. More details on the available options can be found on the <a href="Pluggable-Consensus.md">Pluggable Consensus</a> page. See also the <a href="Demo-PoA-tutorial.md">Demo PoA Tutorial</a>.</p>
<h3 id='application-programming-interface'>Application Programming Interface</h3>
<p>Last but not least, have a look at the <a href="JSONRPC.md">JSONRPC Guide</a>.</p>

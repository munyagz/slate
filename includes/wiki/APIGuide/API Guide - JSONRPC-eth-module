<h2 id='the-default-block-parameter'>The default block parameter</h2>
<p>The following methods have an optional extra <code>defaultBlock</code> parameter:</p>

<ul>
<li><a href="#eth_estimategas">eth_estimateGas</a></li>
<li><a href="#eth_getbalance">eth_getBalance</a></li>
<li><a href="#eth_getcode">eth_getCode</a></li>
<li><a href="#eth_gettransactioncount">eth_getTransactionCount</a></li>
<li><a href="#eth_getstorageat">eth_getStorageAt</a></li>
<li><a href="#eth_call">eth_call</a></li>
</ul>

<p>When requests are made that act on the state of Ethereum, the last parameter determines the height of the block.</p>

<p>The following options are possible for the <code>defaultBlock</code> parameter:</p>

<ul>
<li><code>Quantity</code>/<code>Integer</code> - an integer block number;</li>
<li><code>String &quot;earliest&quot;</code> - for the earliest/genesis block;</li>
<li><code>String &quot;latest&quot;</code> - for the latest mined block;</li>
<li><code>String &quot;pending&quot;</code> - for the pending state/transactions.</li>
</ul>
<h2 id='json-rpc-methods'>JSON-RPC methods</h2>
<ul>
<li><a href="#eth_accounts">eth_accounts</a></li>
<li><a href="#eth_blocknumber">eth_blockNumber</a></li>
<li><a href="#eth_call">eth_call</a></li>
<li><a href="#eth_chainid">eth_chainId</a></li>
<li><a href="#eth_coinbase">eth_coinbase</a></li>
<li><a href="#eth_estimategas">eth_estimateGas</a></li>
<li><a href="#eth_gasprice">eth_gasPrice</a></li>
<li><a href="#eth_getbalance">eth_getBalance</a></li>
<li><a href="#eth_getblockbyhash">eth_getBlockByHash</a></li>
<li><a href="#eth_getblockbynumber">eth_getBlockByNumber</a></li>
<li><a href="#eth_getblocktransactioncountbyhash">eth_getBlockTransactionCountByHash</a></li>
<li><a href="#eth_getblocktransactioncountbynumber">eth_getBlockTransactionCountByNumber</a></li>
<li><a href="#eth_getcode">eth_getCode</a></li>
<li><a href="#eth_getfilterchanges">eth_getFilterChanges</a></li>
<li><a href="#eth_getfilterlogs">eth_getFilterLogs</a></li>
<li><a href="#eth_getlogs">eth_getLogs</a></li>
<li><a href="#eth_getstorageat">eth_getStorageAt</a></li>
<li><a href="#eth_gettransactionbyblockhashandindex">eth_getTransactionByBlockHashAndIndex</a></li>
<li><a href="#eth_gettransactionbyblocknumberandindex">eth_getTransactionByBlockNumberAndIndex</a></li>
<li><a href="#eth_gettransactionbyhash">eth_getTransactionByHash</a></li>
<li><a href="#eth_gettransactioncount">eth_getTransactionCount</a></li>
<li><a href="#eth_gettransactionreceipt">eth_getTransactionReceipt</a></li>
<li><a href="#eth_getunclebyblockhashandindex">eth_getUncleByBlockHashAndIndex</a></li>
<li><a href="#eth_getunclebyblocknumberandindex">eth_getUncleByBlockNumberAndIndex</a></li>
<li><a href="#eth_getunclecountbyblockhash">eth_getUncleCountByBlockHash</a></li>
<li><a href="#eth_getunclecountbyblocknumber">eth_getUncleCountByBlockNumber</a></li>
<li><a href="#eth_getwork">eth_getWork</a></li>
<li><a href="#eth_hashrate">eth_hashrate</a></li>
<li><a href="#eth_mining">eth_mining</a></li>
<li><a href="#eth_newblockfilter">eth_newBlockFilter</a></li>
<li><a href="#eth_newfilter">eth_newFilter</a></li>
<li><a href="#eth_newpendingtransactionfilter">eth_newPendingTransactionFilter</a></li>
<li><a href="#eth_protocolversion">eth_protocolVersion</a></li>
<li><a href="#eth_sendrawtransaction">eth_sendRawTransaction</a></li>
<li><a href="#eth_sendtransaction">eth_sendTransaction</a></li>
<li><a href="#eth_sign">eth_sign</a></li>
<li><a href="#eth_signtransaction">eth_signTransaction</a></li>
<li><a href="#eth_submithashrate">eth_submitHashrate</a></li>
<li><a href="#eth_submitwork">eth_submitWork</a></li>
<li><a href="#eth_syncing">eth_syncing</a></li>
<li><a href="#eth_uninstallfilter">eth_uninstallFilter</a></li>
</ul>
<h2 id='json-rpc-api-reference'>JSON-RPC API Reference</h2><h3 id='eth_accounts'>eth_accounts</h3>
<p>Returns a list of addresses owned by client.</p>
<h4 id='parameters'>Parameters</h4>
<p>None</p>
<h4 id='returns'>Returns</h4>
<ul>
<li><code>Array</code> - 20 Bytes - addresses owned by the client.</li>
</ul>
<h4 id='example'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_accounts&quot;,&quot;params&quot;:[],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: [&quot;0x407d73d8a49eeb85d32cf465507dd71d507100c1&quot;]
}
</code></p>

<hr>
<h3 id='eth_blocknumber'>eth_blockNumber</h3>
<p>Returns the number of most recent block.</p>
<h4 id='parameters-2'>Parameters</h4>
<p>None</p>
<h4 id='returns-2'>Returns</h4>
<ul>
<li><code>Quantity</code> - integer of the current block number the client is on.</li>
</ul>
<h4 id='example-2'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_blockNumber&quot;,&quot;params&quot;:[],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x4b7&quot; // 1207
}
</code></p>

<hr>
<h3 id='eth_call'>eth_call</h3>
<p>Executes a new message call immediately without creating a transaction on the block chain.</p>
<h4 id='parameters-3'>Parameters</h4>
<ol>
<li><code>Object</code> - The transaction call object.

<ul>
<li><code>from</code>:   <code>Address</code> - (optional) 20 Bytes - The address the transaction is send from.</li>
<li><code>to</code>:   <code>Address</code> - (optional when creating new contract) 20 Bytes - The address the transaction is directed to.</li>
<li><code>gas</code>:   <code>Quantity</code> - (optional) Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions.</li>
<li><code>gasPrice</code>:   <code>Quantity</code> - (optional) Integer of the gas price used for each paid gas.</li>
<li><code>value</code>:   <code>Quantity</code> - (optional) Integer of the value sent with this transaction.</li>
<li><code>data</code>:   <code>Data</code> - (optional) 4 byte hash of the method signature followed by encoded parameters. For details see <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">Ethereum Contract ABI</a>.</li>
</ul></li>
<li><code>Quantity</code> or <code>Tag</code> - (optional) Integer block number, or the string <code>&#39;latest&#39;</code>, <code>&#39;earliest&#39;</code> or <code>&#39;pending&#39;</code>, see the <a href="#the-default-block-parameter">default block parameter</a>.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[{</span>
  <span class="s2">"from"</span><span class="p">:</span> <span class="s2">"0x407d73d8a49eeb85d32cf465507dd71d507100c1"</span><span class="p">,</span>
  <span class="s2">"to"</span><span class="p">:</span> <span class="s2">"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b"</span><span class="p">,</span>
  <span class="s2">"value"</span><span class="p">:</span> <span class="s2">"0x186a0"</span> <span class="c1">// 100000</span>
<span class="p">}]</span>
</code></pre><h4 id='returns-3'>Returns</h4>
<ul>
<li><code>Data</code> - the return value of executed contract.</li>
</ul>
<h4 id='example-3'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_call&quot;,&quot;params&quot;:[{&quot;from&quot;:&quot;0x407d73d8a49eeb85d32cf465507dd71d507100c1&quot;,&quot;to&quot;:&quot;0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b&quot;,&quot;value&quot;:&quot;0x186a0&quot;}],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x&quot;
}
</code></p>

<hr>
<h3 id='eth_chainid'>eth_chainId</h3>
<p>Returns the EIP155 chain ID used for transaction signing at the current best block. Null is returned if not available.</p>
<h4 id='parameters-4'>Parameters</h4>
<p>None</p>
<h4 id='returns-4'>Returns</h4>
<ul>
<li><code>Quantity</code> - EIP155 Chain ID, or <code>null</code> if not available.</li>
</ul>
<h4 id='example-4'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_chainId&quot;,&quot;params&quot;:[],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x1&quot;
}
</code></p>

<hr>
<h3 id='eth_coinbase'>eth_coinbase</h3>
<p>Returns the client coinbase address.</p>
<h4 id='parameters-5'>Parameters</h4>
<p>None</p>
<h4 id='returns-5'>Returns</h4>
<ul>
<li><code>Address</code> - The current coinbase address.</li>
</ul>
<h4 id='example-5'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_coinbase&quot;,&quot;params&quot;:[],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x407d73d8a49eeb85d32cf465507dd71d507100c1&quot;
}
</code></p>

<hr>
<h3 id='eth_estimategas'>eth_estimateGas</h3>
<p>Makes a call or transaction, which won&#39;t be added to the blockchain and returns the used gas, which can be used for estimating the used gas.</p>
<h4 id='parameters-6'>Parameters</h4>
<ol>
<li><code>Object</code> - Same as <a href="#eth_call">eth_call</a> parameters, except that all properties are optional.

<ul>
<li><code>from</code>:   <code>Address</code> - (optional) 20 Bytes - The address the transaction is send from.</li>
<li><code>to</code>:   <code>Address</code> - (optional when creating new contract) 20 Bytes - The address the transaction is directed to.</li>
<li><code>gas</code>:   <code>Quantity</code> - (optional) Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions.</li>
<li><code>gasPrice</code>:   <code>Quantity</code> - (optional) Integer of the gas price used for each paid gas.</li>
<li><code>value</code>:   <code>Quantity</code> - (optional) Integer of the value sent with this transaction.</li>
<li><code>data</code>:   <code>Data</code> - (optional) 4 byte hash of the method signature followed by encoded parameters. For details see <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">Ethereum Contract ABI</a>.</li>
</ul></li>
<li><code>Quantity</code> or <code>Tag</code> - (optional) Integer block number, or the string <code>&#39;latest&#39;</code>, <code>&#39;earliest&#39;</code> or <code>&#39;pending&#39;</code>, see the <a href="#the-default-block-parameter">default block parameter</a>.</li>
</ol>
<h4 id='returns-6'>Returns</h4>
<ul>
<li><code>Quantity</code> - The amount of gas used.</li>
</ul>
<h4 id='example-6'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_estimateGas&quot;,&quot;params&quot;:[{ ... }],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x5208&quot; // 21000
}
</code></p>

<hr>
<h3 id='eth_gasprice'>eth_gasPrice</h3>
<p>Returns the current price per gas in wei.</p>
<h4 id='parameters-7'>Parameters</h4>
<p>None</p>
<h4 id='returns-7'>Returns</h4>
<ul>
<li><code>Quantity</code> - integer of the current gas price in wei.</li>
</ul>
<h4 id='example-7'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_gasPrice&quot;,&quot;params&quot;:[],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x9184e72a000&quot; // 10000000000000
}
</code></p>

<hr>
<h3 id='eth_getbalance'>eth_getBalance</h3>
<p>Returns the balance of the account of given address.</p>
<h4 id='parameters-8'>Parameters</h4>
<ol>
<li><code>Address</code> - 20 Bytes - address to check for balance.</li>
<li><code>Quantity</code> or <code>Tag</code> - (optional) integer block number, or the string <code>&#39;latest&#39;</code>, <code>&#39;earliest&#39;</code> or <code>&#39;pending&#39;</code>, see the <a href="#the-default-block-parameter">default block parameter</a>.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span><span class="s2">"0x407d73d8a49eeb85d32cf465507dd71d507100c1"</span><span class="p">]</span>
</code></pre><h4 id='returns-8'>Returns</h4>
<ul>
<li><code>Quantity</code> - integer of the current balance in wei.</li>
</ul>
<h4 id='example-8'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getBalance&quot;,&quot;params&quot;:[&quot;0x407d73d8a49eeb85d32cf465507dd71d507100c1&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x0234c8a3397aab58&quot;
}
</code></p>

<hr>
<h3 id='eth_getblockbyhash'>eth_getBlockByHash</h3>
<p>Returns information about a block by hash.</p>
<h4 id='parameters-9'>Parameters</h4>
<ol>
<li><code>Hash</code> - Hash of a block.</li>
<li><code>Boolean</code> - If <code>true</code> it returns the full transaction objects, if <code>false</code> only the hashes of the transactions.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"</span><span class="p">,</span>
  <span class="kc">true</span>
<span class="p">]</span>
</code></pre><h4 id='returns-9'>Returns</h4>
<ul>
<li><code>Object</code> - A block object, or <code>null</code> when no block was found.

<ul>
<li><code>number</code>:   <code>Quantity</code> - The block number. <code>null</code> when its pending block</li>
<li><code>hash</code>:   <code>Hash</code> - 32 Bytes - hash of the block. <code>null</code> when its pending block</li>
<li><code>parentHash</code>:   <code>Hash</code> - 32 Bytes - hash of the parent block</li>
<li><code>nonce</code>:   <code>Data</code> - 8 Bytes - hash of the generated proof-of-work. <code>null</code> when its pending block. Missing in case of PoA.</li>
<li><code>sha3Uncles</code>:   <code>Data</code> - 32 Bytes - SHA3 of the uncles data in the block</li>
<li><code>logsBloom</code>:   <code>Data</code> - 256 Bytes - the bloom filter for the logs of the block. <code>null</code> when its pending block</li>
<li><code>transactionsRoot</code>:   <code>Data</code> - 32 Bytes - the root of the transaction trie of the block</li>
<li><code>stateRoot</code>:   <code>Data</code> - 32 Bytes - the root of the final state trie of the block</li>
<li><code>receiptsRoot</code>:   <code>Data</code> - 32 Bytes - the root of the receipts trie of the block</li>
<li><code>author</code>:   <code>Address</code> - 20 Bytes - the address of the author of the block (the beneficiary to whom the mining rewards were given)</li>
<li><code>miner</code>:   <code>Address</code> - 20 Bytes - alias of &#39;author&#39;</li>
<li><code>difficulty</code>:   <code>Quantity</code> - integer of the difficulty for this block</li>
<li><code>totalDifficulty</code>:   <code>Quantity</code> - integer of the total difficulty of the chain until this block</li>
<li><code>extraData</code>:   <code>Data</code> - the &#39;extra data&#39; field of this block</li>
<li><code>size</code>:   <code>Quantity</code> - integer the size of this block in bytes</li>
<li><code>gasLimit</code>:   <code>Quantity</code> - the maximum gas allowed in this block</li>
<li><code>gasUsed</code>:   <code>Quantity</code> - the total used gas by all transactions in this block</li>
<li><code>timestamp</code>:   <code>Quantity</code> - the unix timestamp for when the block was collated</li>
<li><code>transactions</code>:   <code>Array</code> - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter</li>
<li><code>uncles</code>:   <code>Array</code> - Array of uncle hashes</li>
</ul></li>
</ul>
<h4 id='example-9'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getBlockByHash&quot;,&quot;params&quot;:[&quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;,true],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: {
    &quot;number&quot;: &quot;0x1b4&quot;, // 436
    &quot;hash&quot;: &quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;,
    &quot;parentHash&quot;: &quot;0x9646252be9520f6e71339a8df9c55e4d7619deeb018d2a3f2d21fc165dde5eb5&quot;,
    &quot;sealFields&quot;: [
      &quot;0xe04d296d2460cfb8472af2c5fd05b5a214109c25688d3704aed5484f9a7792f2&quot;,
      &quot;0x0000000000000042&quot;
    ],
    &quot;sha3Uncles&quot;: &quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&quot;,
    &quot;logsBloom&quot;: &quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;,
    &quot;transactionsRoot&quot;: &quot;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;,
    &quot;stateRoot&quot;: &quot;0xd5855eb08b3387c0af375e9cdb6acfc05eb8f519e419b874b6ff2ffda7ed1dff&quot;,
    &quot;miner&quot;: &quot;0x4e65fda2159562a496f9f3522f89122a3088497a&quot;,
    &quot;difficulty&quot;: &quot;0x27f07&quot;, // 163591
    &quot;totalDifficulty&quot;: &quot;0x27f07&quot;, // 163591
    &quot;extraData&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
    &quot;size&quot;: &quot;0x27f07&quot;, // 163591
    &quot;gasLimit&quot;: &quot;0x9f759&quot;, // 653145
    &quot;minGasPrice&quot;: &quot;0x9f759&quot;, // 653145
    &quot;gasUsed&quot;: &quot;0x9f759&quot;, // 653145
    &quot;timestamp&quot;: &quot;0x54e34e8e&quot;, // 1424182926
    &quot;transactions&quot;: [{ ... }, { ... }, ...],
    &quot;uncles&quot;: [
      &quot;0x1606e5...&quot;,
      &quot;0xd5145a9...&quot;
    ]
  }
}
</code></p>

<hr>
<h3 id='eth_getblockbynumber'>eth_getBlockByNumber</h3>
<p>Returns information about a block by block number.</p>
<h4 id='parameters-10'>Parameters</h4>
<ol>
<li><code>Quantity</code> or <code>Tag</code> - integer of a block number, or the string <code>&#39;earliest&#39;</code>, <code>&#39;latest&#39;</code> or <code>&#39;pending&#39;</code>, as in the <a href="#the-default-block-parameter">default block parameter</a>.</li>
<li><code>Boolean</code> - If <code>true</code> it returns the full transaction objects, if <code>false</code> only the hashes of the transactions.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0x1b4"</span><span class="p">,</span> <span class="c1">// 436</span>
  <span class="kc">true</span>
<span class="p">]</span>
</code></pre><h4 id='returns-10'>Returns</h4>
<ul>
<li><code>Object</code> - A block object, or <code>null</code> when no block was found.

<ul>
<li><code>number</code>:   <code>Quantity</code> - The block number. <code>null</code> when its pending block</li>
<li><code>hash</code>:   <code>Hash</code> - 32 Bytes - hash of the block. <code>null</code> when its pending block</li>
<li><code>parentHash</code>:   <code>Hash</code> - 32 Bytes - hash of the parent block</li>
<li><code>nonce</code>:   <code>Data</code> - 8 Bytes - hash of the generated proof-of-work. <code>null</code> when its pending block. Missing in case of PoA.</li>
<li><code>sha3Uncles</code>:   <code>Data</code> - 32 Bytes - SHA3 of the uncles data in the block</li>
<li><code>logsBloom</code>:   <code>Data</code> - 256 Bytes - the bloom filter for the logs of the block. <code>null</code> when its pending block</li>
<li><code>transactionsRoot</code>:   <code>Data</code> - 32 Bytes - the root of the transaction trie of the block</li>
<li><code>stateRoot</code>:   <code>Data</code> - 32 Bytes - the root of the final state trie of the block</li>
<li><code>receiptsRoot</code>:   <code>Data</code> - 32 Bytes - the root of the receipts trie of the block</li>
<li><code>author</code>:   <code>Address</code> - 20 Bytes - the address of the author of the block (the beneficiary to whom the mining rewards were given)</li>
<li><code>miner</code>:   <code>Address</code> - 20 Bytes - alias of &#39;author&#39;</li>
<li><code>difficulty</code>:   <code>Quantity</code> - integer of the difficulty for this block</li>
<li><code>totalDifficulty</code>:   <code>Quantity</code> - integer of the total difficulty of the chain until this block</li>
<li><code>extraData</code>:   <code>Data</code> - the &#39;extra data&#39; field of this block</li>
<li><code>size</code>:   <code>Quantity</code> - integer the size of this block in bytes</li>
<li><code>gasLimit</code>:   <code>Quantity</code> - the maximum gas allowed in this block</li>
<li><code>gasUsed</code>:   <code>Quantity</code> - the total used gas by all transactions in this block</li>
<li><code>timestamp</code>:   <code>Quantity</code> - the unix timestamp for when the block was collated</li>
<li><code>transactions</code>:   <code>Array</code> - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter</li>
<li><code>uncles</code>:   <code>Array</code> - Array of uncle hashes</li>
</ul></li>
</ul>
<h4 id='example-10'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getBlockByNumber&quot;,&quot;params&quot;:[&quot;0x1b4&quot;,true],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: {
    &quot;number&quot;: &quot;0x1b4&quot;, // 436
    &quot;hash&quot;: &quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;,
    &quot;parentHash&quot;: &quot;0x9646252be9520f6e71339a8df9c55e4d7619deeb018d2a3f2d21fc165dde5eb5&quot;,
    &quot;sealFields&quot;: [
      &quot;0xe04d296d2460cfb8472af2c5fd05b5a214109c25688d3704aed5484f9a7792f2&quot;,
      &quot;0x0000000000000042&quot;
    ],
    &quot;sha3Uncles&quot;: &quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&quot;,
    &quot;logsBloom&quot;: &quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;,
    &quot;transactionsRoot&quot;: &quot;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;,
    &quot;stateRoot&quot;: &quot;0xd5855eb08b3387c0af375e9cdb6acfc05eb8f519e419b874b6ff2ffda7ed1dff&quot;,
    &quot;miner&quot;: &quot;0x4e65fda2159562a496f9f3522f89122a3088497a&quot;,
    &quot;difficulty&quot;: &quot;0x27f07&quot;, // 163591
    &quot;totalDifficulty&quot;: &quot;0x27f07&quot;, // 163591
    &quot;extraData&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
    &quot;size&quot;: &quot;0x27f07&quot;, // 163591
    &quot;gasLimit&quot;: &quot;0x9f759&quot;, // 653145
    &quot;minGasPrice&quot;: &quot;0x9f759&quot;, // 653145
    &quot;gasUsed&quot;: &quot;0x9f759&quot;, // 653145
    &quot;timestamp&quot;: &quot;0x54e34e8e&quot;, // 1424182926
    &quot;transactions&quot;: [{ ... }, { ... }, ...],
    &quot;uncles&quot;: [
      &quot;0x1606e5...&quot;,
      &quot;0xd5145a9...&quot;
    ]
  }
}
</code></p>

<hr>
<h3 id='eth_getblocktransactioncountbyhash'>eth_getBlockTransactionCountByHash</h3>
<p>Returns the number of transactions in a block from a block matching the given block hash.</p>
<h4 id='parameters-11'>Parameters</h4>
<ol>
<li><code>Hash</code> - 32 Bytes - hash of a block.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span><span class="s2">"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"</span><span class="p">]</span>
</code></pre><h4 id='returns-11'>Returns</h4>
<ul>
<li><code>Quantity</code> - integer of the number of transactions in this block.</li>
</ul>
<h4 id='example-11'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getBlockTransactionCountByHash&quot;,&quot;params&quot;:[&quot;0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0xb&quot; // 11
}
</code></p>

<hr>
<h3 id='eth_getblocktransactioncountbynumber'>eth_getBlockTransactionCountByNumber</h3>
<p>Returns the number of transactions in a block from a block matching the given block number.</p>
<h4 id='parameters-12'>Parameters</h4>
<ol>
<li><code>Quantity</code> or <code>Tag</code> - integer of a block number, or the string <code>&#39;earliest&#39;</code>, <code>&#39;latest&#39;</code> or <code>&#39;pending&#39;</code>, as in the <a href="#the-default-block-parameter">default block parameter</a>.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0xe8"</span> <span class="c1">// 232</span>
<span class="p">]</span>
</code></pre><h4 id='returns-12'>Returns</h4>
<ul>
<li><code>Quantity</code> - integer of the number of transactions in this block.</li>
</ul>
<h4 id='example-12'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getBlockTransactionCountByNumber&quot;,&quot;params&quot;:[&quot;0xe8&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0xa&quot; // 10
}
</code></p>

<hr>
<h3 id='eth_getcode'>eth_getCode</h3>
<p>Returns code at a given address.</p>
<h4 id='parameters-13'>Parameters</h4>
<ol>
<li><code>Address</code> - 20 Bytes - address.</li>
<li><code>Quantity</code> or <code>Tag</code> - integer block number, or the string <code>&#39;latest&#39;</code>, <code>&#39;earliest&#39;</code> or <code>&#39;pending&#39;</code>, see the <a href="#the-default-block-parameter">default block parameter</a>.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b"</span><span class="p">,</span>
  <span class="s2">"0x2"</span> <span class="c1">// 2</span>
<span class="p">]</span>
</code></pre><h4 id='returns-13'>Returns</h4>
<ul>
<li><code>Data</code> - the code from the given address.</li>
</ul>
<h4 id='example-13'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getCode&quot;,&quot;params&quot;:[&quot;0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b&quot;,&quot;0x2&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056&quot;
}
</code></p>

<hr>
<h3 id='eth_getfilterchanges'>eth_getFilterChanges</h3>
<p>Polling method for a filter, which returns an array of logs which occurred since last poll.</p>
<h4 id='parameters-14'>Parameters</h4>
<ol>
<li><code>Quantity</code> - The filter id.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0x16"</span> <span class="c1">// 22</span>
<span class="p">]</span>
</code></pre><h4 id='returns-14'>Returns</h4>
<ul>
<li><code>Array</code> - Array of log objects, or an empty array if nothing has changed since last poll.</li>
</ul>
<h4 id='example-14'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getFilterChanges&quot;,&quot;params&quot;:[&quot;0x16&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: [
    {
      &quot;logIndex&quot;: &quot;0x1&quot;, // 1
      &quot;blockNumber&quot;: &quot;0x1b4&quot;, // 436
      &quot;blockHash&quot;: &quot;0x8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcfdf829c5a142f1fccd7d&quot;,
      &quot;transactionHash&quot;: &quot;0xdf829c5a142f1fccd7d8216c5785ac562ff41e2dcfdf5785ac562ff41e2dcf&quot;,
      &quot;transactionIndex&quot;: &quot;0x0&quot;, // 0
      &quot;address&quot;: &quot;0x16c5785ac562ff41e2dcfdf829c5a142f1fccd7d&quot;,
      &quot;data&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
      &quot;topics&quot;: [&quot;0x59ebeb90bc63057b6515673c3ecf9438e5058bca0f92585014eced636878c9a5&quot;]
    },
    ...
  ]
}
</code></p>

<hr>
<h3 id='eth_getfilterlogs'>eth_getFilterLogs</h3>
<p>Returns an array of all logs matching filter with given id.</p>
<h4 id='parameters-15'>Parameters</h4>
<ol>
<li><code>Quantity</code> - The filter id.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0x16"</span> <span class="c1">// 22</span>
<span class="p">]</span>
</code></pre><h4 id='returns-15'>Returns</h4>
<ul>
<li>See <a href="#eth_getfilterchanges">eth_getFilterChanges</a></li>
</ul>
<h4 id='example-15'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getFilterLogs&quot;,&quot;params&quot;:[&quot;0x16&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<hr>
<h3 id='eth_getlogs'>eth_getLogs</h3>
<p>Returns an array of all logs matching a given filter object.</p>
<h4 id='parameters-16'>Parameters</h4>
<ol>
<li><code>Object</code> - The filter object, see <a href="#eth_newfilter">eth_newFilter parameters</a>.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[{</span>
  <span class="s2">"topics"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b"</span><span class="p">]</span>
<span class="p">}]</span>
</code></pre><h4 id='returns-16'>Returns</h4>
<ul>
<li>See <a href="#eth_getfilterchanges">eth_getFilterChanges</a></li>
</ul>
<h4 id='example-16'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getLogs&quot;,&quot;params&quot;:[{&quot;topics&quot;:[&quot;0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b&quot;]}],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<hr>
<h3 id='eth_getstorageat'>eth_getStorageAt</h3>
<p>Returns the value from a storage position at a given address.</p>
<h4 id='parameters-17'>Parameters</h4>
<ol>
<li><code>Address</code> - 20 Bytes - address of the storage.</li>
<li><code>Quantity</code> - integer of the position in the storage.</li>
<li><code>Quantity</code> or <code>Tag</code> - (optional) integer block number, or the string <code>&#39;latest&#39;</code>, <code>&#39;earliest&#39;</code> or <code>&#39;pending&#39;</code>, see the <a href="#the-default-block-parameter">default block parameter</a>.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0x407d73d8a49eeb85d32cf465507dd71d507100c1"</span><span class="p">,</span>
  <span class="s2">"0x0"</span><span class="p">,</span> <span class="c1">// 0</span>
  <span class="s2">"0x2"</span> <span class="c1">// 2</span>
<span class="p">]</span>
</code></pre><h4 id='returns-17'>Returns</h4>
<ul>
<li><code>Data</code> - the value at this storage position.</li>
</ul>
<h4 id='example-17'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getStorageAt&quot;,&quot;params&quot;:[&quot;0x407d73d8a49eeb85d32cf465507dd71d507100c1&quot;,&quot;0x0&quot;,&quot;0x2&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000003&quot;
}
</code></p>

<hr>
<h3 id='eth_gettransactionbyblockhashandindex'>eth_getTransactionByBlockHashAndIndex</h3>
<p>Returns information about a transaction by block hash and transaction index position.</p>
<h4 id='parameters-18'>Parameters</h4>
<ol>
<li><code>Hash</code> - hash of a block.</li>
<li><code>Quantity</code> - integer of the transaction index position.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"</span><span class="p">,</span>
  <span class="s2">"0x0"</span> <span class="c1">// 0</span>
<span class="p">]</span>
</code></pre><h4 id='returns-18'>Returns</h4>
<ul>
<li><code>Object</code> - A transaction object, or <code>null</code> when no transaction was found:

<ul>
<li><code>hash</code>:   <code>Hash</code> - 32 Bytes - hash of the transaction.</li>
<li><code>nonce</code>:   <code>Quantity</code> - the number of transactions made by the sender prior to this one.</li>
<li><code>blockHash</code>:   <code>Hash</code> - 32 Bytes - hash of the block where this transaction was in. <code>null</code> when its pending.</li>
<li><code>blockNumber</code>:   <code>Quantity</code> or <code>Tag</code> - block number where this transaction was in. <code>null</code> when its pending.</li>
<li><code>transactionIndex</code>:   <code>Quantity</code> - integer of the transactions index position in the block. <code>null</code> when its pending.</li>
<li><code>from</code>:   <code>Address</code> - 20 Bytes - address of the sender.</li>
<li><code>to</code>:   <code>Address</code> - 20 Bytes - address of the receiver. <code>null</code> when its a contract creation transaction.</li>
<li><code>value</code>:   <code>Quantity</code> - value transferred in Wei.</li>
<li><code>gasPrice</code>:   <code>Quantity</code> - gas price provided by the sender in Wei.</li>
<li><code>gas</code>:   <code>Quantity</code> - gas provided by the sender.</li>
<li><code>input</code>:   <code>Data</code> - the data send along with the transaction.</li>
<li><code>v</code>:   <code>Quantity</code> - the standardised V field of the signature.</li>
<li><code>standardV</code>:   <code>Quantity</code> - the standardised V field of the signature (0 or 1).</li>
<li><code>r</code>:   <code>Quantity</code> - the R field of the signature.</li>
<li><code>raw</code>:   <code>Data</code> - raw transaction data</li>
<li><code>publicKey</code>:   <code>Hash</code> - public key of the signer.</li>
<li><code>chainId</code>:   <code>Quantity</code> - the chain id of the transaction, if any.</li>
<li><code>creates</code>:   <code>Hash</code> - creates contract hash</li>
<li><code>condition</code>:   <code>Object</code> - (optional) conditional submission, Block number in <code>block</code> or timestamp in <code>time</code> or <code>null</code>. (parity-feature)</li>
</ul></li>
</ul>
<h4 id='example-18'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getTransactionByBlockHashAndIndex&quot;,&quot;params&quot;:[&quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;,&quot;0x0&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: {
    &quot;hash&quot;: &quot;0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b&quot;,
    &quot;nonce&quot;: &quot;0x0&quot;, // 0
    &quot;blockHash&quot;: &quot;0xbeab0aa2411b7ab17f30a99d3cb9c6ef2fc5426d6ad6fd9e2a26a6aed1d1055b&quot;,
    &quot;blockNumber&quot;: &quot;0x15df&quot;, // 5599
    &quot;transactionIndex&quot;: &quot;0x1&quot;, // 1
    &quot;from&quot;: &quot;0x407d73d8a49eeb85d32cf465507dd71d507100c1&quot;,
    &quot;to&quot;: &quot;0x853f43d8a49eeb85d32cf465507dd71d507100c1&quot;,
    &quot;value&quot;: &quot;0x7f110&quot;, // 520464
    &quot;gas&quot;: &quot;0x7f110&quot;, // 520464
    &quot;gasPrice&quot;: &quot;0x09184e72a000&quot;,
    &quot;input&quot;: &quot;0x603880600c6000396000f300603880600c6000396000f3603880600c6000396000f360&quot;
  }
}
</code></p>

<hr>
<h3 id='eth_gettransactionbyblocknumberandindex'>eth_getTransactionByBlockNumberAndIndex</h3>
<p>Returns information about a transaction by block number and transaction index position.</p>
<h4 id='parameters-19'>Parameters</h4>
<ol>
<li><code>Quantity</code> or <code>Tag</code> - a block number, or the string <code>&#39;earliest&#39;</code>, <code>&#39;latest&#39;</code> or <code>&#39;pending&#39;</code>, as in the <a href="#the-default-block-parameter">default block parameter</a>.</li>
<li><code>Quantity</code> - The transaction index position.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0x29c"</span><span class="p">,</span> <span class="c1">// 668</span>
  <span class="s2">"0x0"</span> <span class="c1">// 0</span>
<span class="p">]</span>
</code></pre><h4 id='returns-19'>Returns</h4>
<ul>
<li><code>Object</code> - A block object, or <code>null</code> when no block was found.

<ul>
<li><code>number</code>:   <code>Quantity</code> - The block number. <code>null</code> when its pending block</li>
<li><code>hash</code>:   <code>Hash</code> - 32 Bytes - hash of the block. <code>null</code> when its pending block</li>
<li><code>parentHash</code>:   <code>Hash</code> - 32 Bytes - hash of the parent block</li>
<li><code>nonce</code>:   <code>Data</code> - 8 Bytes - hash of the generated proof-of-work. <code>null</code> when its pending block. Missing in case of PoA.</li>
<li><code>sha3Uncles</code>:   <code>Data</code> - 32 Bytes - SHA3 of the uncles data in the block</li>
<li><code>logsBloom</code>:   <code>Data</code> - 256 Bytes - the bloom filter for the logs of the block. <code>null</code> when its pending block</li>
<li><code>transactionsRoot</code>:   <code>Data</code> - 32 Bytes - the root of the transaction trie of the block</li>
<li><code>stateRoot</code>:   <code>Data</code> - 32 Bytes - the root of the final state trie of the block</li>
<li><code>receiptsRoot</code>:   <code>Data</code> - 32 Bytes - the root of the receipts trie of the block</li>
<li><code>author</code>:   <code>Address</code> - 20 Bytes - the address of the author of the block (the beneficiary to whom the mining rewards were given)</li>
<li><code>miner</code>:   <code>Address</code> - 20 Bytes - alias of &#39;author&#39;</li>
<li><code>difficulty</code>:   <code>Quantity</code> - integer of the difficulty for this block</li>
<li><code>totalDifficulty</code>:   <code>Quantity</code> - integer of the total difficulty of the chain until this block</li>
<li><code>extraData</code>:   <code>Data</code> - the &#39;extra data&#39; field of this block</li>
<li><code>size</code>:   <code>Quantity</code> - integer the size of this block in bytes</li>
<li><code>gasLimit</code>:   <code>Quantity</code> - the maximum gas allowed in this block</li>
<li><code>gasUsed</code>:   <code>Quantity</code> - the total used gas by all transactions in this block</li>
<li><code>timestamp</code>:   <code>Quantity</code> - the unix timestamp for when the block was collated</li>
<li><code>transactions</code>:   <code>Array</code> - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter</li>
<li><code>uncles</code>:   <code>Array</code> - Array of uncle hashes</li>
</ul></li>
</ul>
<h4 id='example-19'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getTransactionByBlockNumberAndIndex&quot;,&quot;params&quot;:[&quot;0x29c&quot;,&quot;0x0&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: {
    &quot;number&quot;: &quot;0x1b4&quot;, // 436
    &quot;hash&quot;: &quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;,
    &quot;parentHash&quot;: &quot;0x9646252be9520f6e71339a8df9c55e4d7619deeb018d2a3f2d21fc165dde5eb5&quot;,
    &quot;sealFields&quot;: [
      &quot;0xe04d296d2460cfb8472af2c5fd05b5a214109c25688d3704aed5484f9a7792f2&quot;,
      &quot;0x0000000000000042&quot;
    ],
    &quot;sha3Uncles&quot;: &quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&quot;,
    &quot;logsBloom&quot;: &quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;,
    &quot;transactionsRoot&quot;: &quot;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;,
    &quot;stateRoot&quot;: &quot;0xd5855eb08b3387c0af375e9cdb6acfc05eb8f519e419b874b6ff2ffda7ed1dff&quot;,
    &quot;miner&quot;: &quot;0x4e65fda2159562a496f9f3522f89122a3088497a&quot;,
    &quot;difficulty&quot;: &quot;0x27f07&quot;, // 163591
    &quot;totalDifficulty&quot;: &quot;0x27f07&quot;, // 163591
    &quot;extraData&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
    &quot;size&quot;: &quot;0x27f07&quot;, // 163591
    &quot;gasLimit&quot;: &quot;0x9f759&quot;, // 653145
    &quot;minGasPrice&quot;: &quot;0x9f759&quot;, // 653145
    &quot;gasUsed&quot;: &quot;0x9f759&quot;, // 653145
    &quot;timestamp&quot;: &quot;0x54e34e8e&quot;, // 1424182926
    &quot;transactions&quot;: [{ ... }, { ... }, ...],
    &quot;uncles&quot;: [
      &quot;0x1606e5...&quot;,
      &quot;0xd5145a9...&quot;
    ]
  }
}
</code></p>

<hr>
<h3 id='eth_gettransactionbyhash'>eth_getTransactionByHash</h3>
<p>Returns the information about a transaction requested by transaction hash.</p>
<h4 id='parameters-20'>Parameters</h4>
<ol>
<li><code>Hash</code> - 32 Bytes - hash of a transaction.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span><span class="s2">"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"</span><span class="p">]</span>
</code></pre><h4 id='returns-20'>Returns</h4>
<ul>
<li><code>Object</code> - A transaction object, or <code>null</code> when no transaction was found:

<ul>
<li><code>hash</code>:   <code>Hash</code> - 32 Bytes - hash of the transaction.</li>
<li><code>nonce</code>:   <code>Quantity</code> - the number of transactions made by the sender prior to this one.</li>
<li><code>blockHash</code>:   <code>Hash</code> - 32 Bytes - hash of the block where this transaction was in. <code>null</code> when its pending.</li>
<li><code>blockNumber</code>:   <code>Quantity</code> or <code>Tag</code> - block number where this transaction was in. <code>null</code> when its pending.</li>
<li><code>transactionIndex</code>:   <code>Quantity</code> - integer of the transactions index position in the block. <code>null</code> when its pending.</li>
<li><code>from</code>:   <code>Address</code> - 20 Bytes - address of the sender.</li>
<li><code>to</code>:   <code>Address</code> - 20 Bytes - address of the receiver. <code>null</code> when its a contract creation transaction.</li>
<li><code>value</code>:   <code>Quantity</code> - value transferred in Wei.</li>
<li><code>gasPrice</code>:   <code>Quantity</code> - gas price provided by the sender in Wei.</li>
<li><code>gas</code>:   <code>Quantity</code> - gas provided by the sender.</li>
<li><code>input</code>:   <code>Data</code> - the data send along with the transaction.</li>
<li><code>v</code>:   <code>Quantity</code> - the standardised V field of the signature.</li>
<li><code>standardV</code>:   <code>Quantity</code> - the standardised V field of the signature (0 or 1).</li>
<li><code>r</code>:   <code>Quantity</code> - the R field of the signature.</li>
<li><code>raw</code>:   <code>Data</code> - raw transaction data</li>
<li><code>publicKey</code>:   <code>Hash</code> - public key of the signer.</li>
<li><code>chainId</code>:   <code>Quantity</code> - the chain id of the transaction, if any.</li>
<li><code>creates</code>:   <code>Hash</code> - creates contract hash</li>
<li><code>condition</code>:   <code>Object</code> - (optional) conditional submission, Block number in <code>block</code> or timestamp in <code>time</code> or <code>null</code>. (parity-feature)</li>
</ul></li>
</ul>
<h4 id='example-20'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getTransactionByHash&quot;,&quot;params&quot;:[&quot;0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: {
    &quot;hash&quot;: &quot;0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b&quot;,
    &quot;nonce&quot;: &quot;0x0&quot;, // 0
    &quot;blockHash&quot;: &quot;0xbeab0aa2411b7ab17f30a99d3cb9c6ef2fc5426d6ad6fd9e2a26a6aed1d1055b&quot;,
    &quot;blockNumber&quot;: &quot;0x15df&quot;, // 5599
    &quot;transactionIndex&quot;: &quot;0x1&quot;, // 1
    &quot;from&quot;: &quot;0x407d73d8a49eeb85d32cf465507dd71d507100c1&quot;,
    &quot;to&quot;: &quot;0x853f43d8a49eeb85d32cf465507dd71d507100c1&quot;,
    &quot;value&quot;: &quot;0x7f110&quot;, // 520464
    &quot;gas&quot;: &quot;0x7f110&quot;, // 520464
    &quot;gasPrice&quot;: &quot;0x09184e72a000&quot;,
    &quot;input&quot;: &quot;0x603880600c6000396000f300603880600c6000396000f3603880600c6000396000f360&quot;
  }
}
</code></p>

<hr>
<h3 id='eth_gettransactioncount'>eth_getTransactionCount</h3>
<p>Returns the number of transactions <em>sent</em> from an address.</p>
<h4 id='parameters-21'>Parameters</h4>
<ol>
<li><code>Address</code> - 20 Bytes - address.</li>
<li><code>Quantity</code> or <code>Tag</code> - (optional) integer block number, or the string <code>&#39;latest&#39;</code>, <code>&#39;earliest&#39;</code> or <code>&#39;pending&#39;</code>, see the <a href="#the-default-block-parameter">default block parameter</a>.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span><span class="s2">"0x407d73d8a49eeb85d32cf465507dd71d507100c1"</span><span class="p">]</span>
</code></pre><h4 id='returns-21'>Returns</h4>
<ul>
<li><code>Quantity</code> - integer of the number of transactions send from this address.</li>
</ul>
<h4 id='example-21'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getTransactionCount&quot;,&quot;params&quot;:[&quot;0x407d73d8a49eeb85d32cf465507dd71d507100c1&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x1&quot; // 1
}
</code></p>

<hr>
<h3 id='eth_gettransactionreceipt'>eth_getTransactionReceipt</h3>
<p>Returns the receipt of a transaction by transaction hash.</p>

<p><strong>Note</strong> That the receipt is available even for pending transactions.</p>
<h4 id='parameters-22'>Parameters</h4>
<ol>
<li><code>Hash</code> - hash of a transaction.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span><span class="s2">"0x444172bef57ad978655171a8af2cfd89baa02a97fcb773067aef7794d6913374"</span><span class="p">]</span>
</code></pre><h4 id='returns-22'>Returns</h4>
<ul>
<li><code>Object</code> - A transaction receipt object, or <code>null</code> when no receipt was found:

<ul>
<li><code>blockHash</code>:   <code>Hash</code> - 32 Bytes - hash of the block where this transaction was in.</li>
<li><code>blockNumber</code>:   <code>Quantity</code> or <code>Tag</code> - block number where this transaction was in.</li>
<li><code>contractAddress</code>:   <code>Address</code> - 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise <code>null</code>.</li>
<li><code>cumulativeGasUsed</code>:   <code>Quantity</code> - The total amount of gas used when this transaction was executed in the block.</li>
<li><code>from</code>:   <code>Address</code> - 20 Bytes - The address of the sender.</li>
<li><code>to</code>:   <code>Address</code> - 20 Bytes - The address of the receiver. null when it’s a contract creation transaction.</li>
<li><code>gasUsed</code>:   <code>Quantity</code> - The amount of gas used by this specific transaction alone.</li>
<li><code>logs</code>:   <code>Array</code> - Array of log objects, which this transaction generated.</li>
<li><code>logsBloom</code>:   <code>Hash</code> - 256 Bytes - A bloom filter of logs/events generated by contracts during transaction execution. Used to efficiently rule out transactions without expected logs.</li>
<li><code>root</code>:   <code>Hash</code> - 32 Bytes - Merkle root of the state trie after the transaction has been executed (optional after Byzantium hard fork <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-609.md">EIP609</a>)</li>
<li><code>status</code>:   <code>Quantity</code> - <code>0x0</code> indicates transaction failure , <code>0x1</code> indicates transaction success. Set for blocks mined after Byzantium hard fork <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-609.md">EIP609</a>, <code>null</code> before.</li>
<li><code>transactionHash</code>:   <code>Hash</code> - 32 Bytes - hash of the transaction.</li>
<li><code>transactionIndex</code>:   <code>Quantity</code> - Integer of the transactions index position in the block.</li>
</ul></li>
</ul>
<h4 id='example-22'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getTransactionReceipt&quot;,&quot;params&quot;:[&quot;0x444172bef57ad978655171a8af2cfd89baa02a97fcb773067aef7794d6913374&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: {
    &quot;blockHash&quot;: &quot;0x67c0303244ae4beeec329e0c66198e8db8938a94d15a366c7514626528abfc8c&quot;,
    &quot;blockNumber&quot;: &quot;0x6914b0&quot;,
    &quot;contractAddress&quot;: &quot;0x471a8bf3fd0dfbe20658a97155388cec674190bf&quot;, // or null, if none was created
    &quot;from&quot;: &quot;0xc931d93e97ab07fe42d923478ba2465f2&quot;,
    &quot;to&quot;: null, // value is null because this example transaction is a contract creation
    &quot;cumulativeGasUsed&quot;: &quot;0x158e33&quot;,
    &quot;gasUsed&quot;: &quot;0xba2e6&quot;,
    &quot;logs&quot;: [], // logs as returned by eth_getFilterLogs, etc.
    &quot;logsBloom&quot;: &quot;0xquot;,
    &quot;root&quot;: null,
    &quot;status&quot;: &quot;0x1&quot;,
    &quot;transactionHash&quot;: &quot;0x444172bef57ad978655171a8af2cfd89baa02a97fcb773067aef7794d6913374&quot;,
    &quot;transactionIndex&quot;: &quot;0x4&quot;
  }
}
</code></p>

<hr>
<h3 id='eth_getunclebyblockhashandindex'>eth_getUncleByBlockHashAndIndex</h3>
<p>Returns information about a uncle of a block by hash and uncle index position.</p>

<p><strong>Note:</strong> An uncle doesn&#39;t contain individual transactions.</p>
<h4 id='parameters-23'>Parameters</h4>
<ol>
<li><code>Hash</code> - Hash of a block.</li>
<li><code>Quantity</code> - The uncle&#39;s index position.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b"</span><span class="p">,</span>
  <span class="s2">"0x0"</span> <span class="c1">// 0</span>
<span class="p">]</span>
</code></pre><h4 id='returns-23'>Returns</h4>
<ul>
<li><code>Object</code> - A block object, or <code>null</code> when no block was found.

<ul>
<li><code>number</code>:   <code>Quantity</code> - The block number. <code>null</code> when its pending block</li>
<li><code>hash</code>:   <code>Hash</code> - 32 Bytes - hash of the block. <code>null</code> when its pending block</li>
<li><code>parentHash</code>:   <code>Hash</code> - 32 Bytes - hash of the parent block</li>
<li><code>nonce</code>:   <code>Data</code> - 8 Bytes - hash of the generated proof-of-work. <code>null</code> when its pending block. Missing in case of PoA.</li>
<li><code>sha3Uncles</code>:   <code>Data</code> - 32 Bytes - SHA3 of the uncles data in the block</li>
<li><code>logsBloom</code>:   <code>Data</code> - 256 Bytes - the bloom filter for the logs of the block. <code>null</code> when its pending block</li>
<li><code>transactionsRoot</code>:   <code>Data</code> - 32 Bytes - the root of the transaction trie of the block</li>
<li><code>stateRoot</code>:   <code>Data</code> - 32 Bytes - the root of the final state trie of the block</li>
<li><code>receiptsRoot</code>:   <code>Data</code> - 32 Bytes - the root of the receipts trie of the block</li>
<li><code>author</code>:   <code>Address</code> - 20 Bytes - the address of the author of the block (the beneficiary to whom the mining rewards were given)</li>
<li><code>miner</code>:   <code>Address</code> - 20 Bytes - alias of &#39;author&#39;</li>
<li><code>difficulty</code>:   <code>Quantity</code> - integer of the difficulty for this block</li>
<li><code>totalDifficulty</code>:   <code>Quantity</code> - integer of the total difficulty of the chain until this block</li>
<li><code>extraData</code>:   <code>Data</code> - the &#39;extra data&#39; field of this block</li>
<li><code>size</code>:   <code>Quantity</code> - integer the size of this block in bytes</li>
<li><code>gasLimit</code>:   <code>Quantity</code> - the maximum gas allowed in this block</li>
<li><code>gasUsed</code>:   <code>Quantity</code> - the total used gas by all transactions in this block</li>
<li><code>timestamp</code>:   <code>Quantity</code> - the unix timestamp for when the block was collated</li>
<li><code>transactions</code>:   <code>Array</code> - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter</li>
<li><code>uncles</code>:   <code>Array</code> - Array of uncle hashes</li>
</ul></li>
</ul>
<h4 id='example-23'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getUncleByBlockHashAndIndex&quot;,&quot;params&quot;:[&quot;0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b&quot;,&quot;0x0&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: {
    &quot;number&quot;: &quot;0x1b4&quot;, // 436
    &quot;hash&quot;: &quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;,
    &quot;parentHash&quot;: &quot;0x9646252be9520f6e71339a8df9c55e4d7619deeb018d2a3f2d21fc165dde5eb5&quot;,
    &quot;sealFields&quot;: [
      &quot;0xe04d296d2460cfb8472af2c5fd05b5a214109c25688d3704aed5484f9a7792f2&quot;,
      &quot;0x0000000000000042&quot;
    ],
    &quot;sha3Uncles&quot;: &quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&quot;,
    &quot;logsBloom&quot;: &quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;,
    &quot;transactionsRoot&quot;: &quot;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;,
    &quot;stateRoot&quot;: &quot;0xd5855eb08b3387c0af375e9cdb6acfc05eb8f519e419b874b6ff2ffda7ed1dff&quot;,
    &quot;miner&quot;: &quot;0x4e65fda2159562a496f9f3522f89122a3088497a&quot;,
    &quot;difficulty&quot;: &quot;0x27f07&quot;, // 163591
    &quot;totalDifficulty&quot;: &quot;0x27f07&quot;, // 163591
    &quot;extraData&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
    &quot;size&quot;: &quot;0x27f07&quot;, // 163591
    &quot;gasLimit&quot;: &quot;0x9f759&quot;, // 653145
    &quot;minGasPrice&quot;: &quot;0x9f759&quot;, // 653145
    &quot;gasUsed&quot;: &quot;0x9f759&quot;, // 653145
    &quot;timestamp&quot;: &quot;0x54e34e8e&quot;, // 1424182926
    &quot;transactions&quot;: [{ ... }, { ... }, ...],
    &quot;uncles&quot;: [
      &quot;0x1606e5...&quot;,
      &quot;0xd5145a9...&quot;
    ]
  }
}
</code></p>

<hr>
<h3 id='eth_getunclebyblocknumberandindex'>eth_getUncleByBlockNumberAndIndex</h3>
<p>Returns information about a uncle of a block by number and uncle index position.</p>

<p><strong>Note:</strong> An uncle doesn&#39;t contain individual transactions.</p>
<h4 id='parameters-24'>Parameters</h4>
<ol>
<li><code>Quantity</code> or <code>Tag</code> - a block number, or the string <code>&#39;earliest&#39;</code>, <code>&#39;latest&#39;</code> or <code>&#39;pending&#39;</code>, as in the <a href="#the-default-block-parameter">default block parameter</a>.</li>
<li><code>Quantity</code> - The uncle&#39;s index position.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0x29c"</span><span class="p">,</span> <span class="c1">// 668</span>
  <span class="s2">"0x0"</span> <span class="c1">// 0</span>
<span class="p">]</span>
</code></pre><h4 id='returns-24'>Returns</h4>
<ul>
<li><code>Object</code> - A block object, or <code>null</code> when no block was found.

<ul>
<li><code>number</code>:   <code>Quantity</code> - The block number. <code>null</code> when its pending block</li>
<li><code>hash</code>:   <code>Hash</code> - 32 Bytes - hash of the block. <code>null</code> when its pending block</li>
<li><code>parentHash</code>:   <code>Hash</code> - 32 Bytes - hash of the parent block</li>
<li><code>nonce</code>:   <code>Data</code> - 8 Bytes - hash of the generated proof-of-work. <code>null</code> when its pending block. Missing in case of PoA.</li>
<li><code>sha3Uncles</code>:   <code>Data</code> - 32 Bytes - SHA3 of the uncles data in the block</li>
<li><code>logsBloom</code>:   <code>Data</code> - 256 Bytes - the bloom filter for the logs of the block. <code>null</code> when its pending block</li>
<li><code>transactionsRoot</code>:   <code>Data</code> - 32 Bytes - the root of the transaction trie of the block</li>
<li><code>stateRoot</code>:   <code>Data</code> - 32 Bytes - the root of the final state trie of the block</li>
<li><code>receiptsRoot</code>:   <code>Data</code> - 32 Bytes - the root of the receipts trie of the block</li>
<li><code>author</code>:   <code>Address</code> - 20 Bytes - the address of the author of the block (the beneficiary to whom the mining rewards were given)</li>
<li><code>miner</code>:   <code>Address</code> - 20 Bytes - alias of &#39;author&#39;</li>
<li><code>difficulty</code>:   <code>Quantity</code> - integer of the difficulty for this block</li>
<li><code>totalDifficulty</code>:   <code>Quantity</code> - integer of the total difficulty of the chain until this block</li>
<li><code>extraData</code>:   <code>Data</code> - the &#39;extra data&#39; field of this block</li>
<li><code>size</code>:   <code>Quantity</code> - integer the size of this block in bytes</li>
<li><code>gasLimit</code>:   <code>Quantity</code> - the maximum gas allowed in this block</li>
<li><code>gasUsed</code>:   <code>Quantity</code> - the total used gas by all transactions in this block</li>
<li><code>timestamp</code>:   <code>Quantity</code> - the unix timestamp for when the block was collated</li>
<li><code>transactions</code>:   <code>Array</code> - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter</li>
<li><code>uncles</code>:   <code>Array</code> - Array of uncle hashes</li>
</ul></li>
</ul>
<h4 id='example-24'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getUncleByBlockNumberAndIndex&quot;,&quot;params&quot;:[&quot;0x29c&quot;,&quot;0x0&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: {
    &quot;number&quot;: &quot;0x1b4&quot;, // 436
    &quot;hash&quot;: &quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;,
    &quot;parentHash&quot;: &quot;0x9646252be9520f6e71339a8df9c55e4d7619deeb018d2a3f2d21fc165dde5eb5&quot;,
    &quot;sealFields&quot;: [
      &quot;0xe04d296d2460cfb8472af2c5fd05b5a214109c25688d3704aed5484f9a7792f2&quot;,
      &quot;0x0000000000000042&quot;
    ],
    &quot;sha3Uncles&quot;: &quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&quot;,
    &quot;logsBloom&quot;: &quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;,
    &quot;transactionsRoot&quot;: &quot;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;,
    &quot;stateRoot&quot;: &quot;0xd5855eb08b3387c0af375e9cdb6acfc05eb8f519e419b874b6ff2ffda7ed1dff&quot;,
    &quot;miner&quot;: &quot;0x4e65fda2159562a496f9f3522f89122a3088497a&quot;,
    &quot;difficulty&quot;: &quot;0x27f07&quot;, // 163591
    &quot;totalDifficulty&quot;: &quot;0x27f07&quot;, // 163591
    &quot;extraData&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
    &quot;size&quot;: &quot;0x27f07&quot;, // 163591
    &quot;gasLimit&quot;: &quot;0x9f759&quot;, // 653145
    &quot;minGasPrice&quot;: &quot;0x9f759&quot;, // 653145
    &quot;gasUsed&quot;: &quot;0x9f759&quot;, // 653145
    &quot;timestamp&quot;: &quot;0x54e34e8e&quot;, // 1424182926
    &quot;transactions&quot;: [{ ... }, { ... }, ...],
    &quot;uncles&quot;: [
      &quot;0x1606e5...&quot;,
      &quot;0xd5145a9...&quot;
    ]
  }
}
</code></p>

<hr>
<h3 id='eth_getunclecountbyblockhash'>eth_getUncleCountByBlockHash</h3>
<p>Returns the number of uncles in a block from a block matching the given block hash.</p>
<h4 id='parameters-25'>Parameters</h4>
<ol>
<li><code>Hash</code> - 32 Bytes - hash of a block.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span><span class="s2">"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"</span><span class="p">]</span>
</code></pre><h4 id='returns-25'>Returns</h4>
<ul>
<li><code>Quantity</code> - integer of the number of uncles in this block.</li>
</ul>
<h4 id='example-25'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getUncleCountByBlockHash&quot;,&quot;params&quot;:[&quot;0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x0&quot; // 0
}
</code></p>

<hr>
<h3 id='eth_getunclecountbyblocknumber'>eth_getUncleCountByBlockNumber</h3>
<p>Returns the number of uncles in a block from a block matching the given block number.</p>
<h4 id='parameters-26'>Parameters</h4>
<ol>
<li><code>Quantity</code> or <code>Tag</code> - integer of a block number, or the string &#39;latest&#39;, &#39;earliest&#39; or &#39;pending&#39;, see the <a href="#the-default-block-parameter">default block parameter</a>.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0xe8"</span> <span class="c1">// 232</span>
<span class="p">]</span>
</code></pre><h4 id='returns-26'>Returns</h4>
<ul>
<li><code>Quantity</code> - integer of the number of uncles in this block.</li>
</ul>
<h4 id='example-26'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getUncleCountByBlockNumber&quot;,&quot;params&quot;:[&quot;0xe8&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x1&quot; // 1
}
</code></p>

<hr>
<h3 id='eth_getwork'>eth_getWork</h3>
<p>Returns the hash of the current block, the seedHash, and the boundary condition to be met (&quot;target&quot;).</p>
<h4 id='parameters-27'>Parameters</h4>
<p>None</p>
<h4 id='returns-27'>Returns</h4>
<ul>
<li><code>Array</code> - Array with the following properties:

<ul>
<li><code>Data</code>, 32 Bytes - current block header pow-hash.</li>
<li><code>Data</code>, 32 Bytes - the seed hash used for the DAG.</li>
<li><code>Data</code>, 32 Bytes - the boundary condition (&quot;target&quot;), 2^256 / difficulty.</li>
<li><code>Quantity</code>, the current block number.</li>
</ul></li>
</ul>
<h4 id='example-27'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_getWork&quot;,&quot;params&quot;:[],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: [
    &quot;0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef&quot;,
    &quot;0x5EED00000000000000000000000000005EED0000000000000000000000000000&quot;,
    &quot;0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000&quot;,
    &quot;0x1&quot; // 1
  ]
}
</code></p>

<hr>
<h3 id='eth_hashrate'>eth_hashrate</h3>
<p>Returns the number of hashes per second that the node is mining with.</p>
<h4 id='parameters-28'>Parameters</h4>
<p>None</p>
<h4 id='returns-28'>Returns</h4>
<ul>
<li><code>Quantity</code> - number of hashes per second.</li>
</ul>
<h4 id='example-28'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_hashrate&quot;,&quot;params&quot;:[],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x38a&quot; // 906
}
</code></p>

<hr>
<h3 id='eth_mining'>eth_mining</h3>
<p>Returns <code>true</code> if client is actively mining new blocks.</p>
<h4 id='parameters-29'>Parameters</h4>
<p>None</p>
<h4 id='returns-29'>Returns</h4>
<ul>
<li><code>Boolean</code> - <code>true</code> of the client is mining, otherwise <code>false</code>.</li>
</ul>
<h4 id='example-29'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_mining&quot;,&quot;params&quot;:[],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: true
}
</code></p>

<hr>
<h3 id='eth_newblockfilter'>eth_newBlockFilter</h3>
<p>Creates a filter in the node, to notify when a new block arrives.
To check if the state has changed, call <a href="#eth_getfilterchanges">eth_getFilterChanges</a>.</p>
<h4 id='parameters-30'>Parameters</h4>
<p>None</p>
<h4 id='returns-30'>Returns</h4>
<ul>
<li><code>Quantity</code> - A filter id.</li>
</ul>
<h4 id='example-30'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_newBlockFilter&quot;,&quot;params&quot;:[],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x1&quot; // 1
}
</code></p>

<hr>
<h3 id='eth_newfilter'>eth_newFilter</h3>
<p>Creates a filter object, based on filter options, to notify when the state changes (logs).
To check if the state has changed, call <a href="#eth_getfilterchanges">eth_getFilterChanges</a>.</p>
<h5 id='a-note-on-specifying-topic-filters'>A note on specifying topic filters:</h5>
<p>Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters:
* <code>[]</code> &quot;anything&quot;
* <code>[A]</code> &quot;A in first position (and anything after)&quot;
* <code>[null, B]</code> &quot;anything in first position AND B in second position (and anything after)&quot;
* <code>[A, B]</code> &quot;A in first position AND B in second position (and anything after)&quot;
* <code>[[A, B], [A, B]]</code> &quot;(A OR B) in first position AND (A OR B) in second position (and anything after)&quot;</p>
<h4 id='parameters-31'>Parameters</h4>
<ol>
<li><code>Object</code> - The filter options:

<ul>
<li><code>fromBlock</code>:   <code>Quantity</code> or <code>Tag</code> - (optional) (default: <code>latest</code>) Integer block number, or <code>&#39;latest&#39;</code> for the last mined block or <code>&#39;pending&#39;</code>, <code>&#39;earliest&#39;</code> for not yet mined transactions.</li>
<li><code>toBlock</code>:   <code>Quantity</code> or <code>Tag</code> - (optional) (default: <code>latest</code>) Integer block number, or <code>&#39;latest&#39;</code> for the last mined block or <code>&#39;pending&#39;</code>, <code>&#39;earliest&#39;</code> for not yet mined transactions.</li>
<li><code>address</code>:   <code>Address</code> - (optional) 20 Bytes - Contract address or a list of addresses from which logs should originate.</li>
<li><code>topics</code>:   <code>Array</code> - (optional) Array of 32 Bytes <code>Data</code> topics. Topics are order-dependent. It&#39;s possible to pass in <code>null</code> to match any topic, or a subarray of multiple topics of which one should be matching.</li>
<li><code>limit</code>:   <code>Quantity</code> - (optional) The maximum number of entries to retrieve (latest first).</li>
</ul></li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[{</span>
  <span class="s2">"fromBlock"</span><span class="p">:</span> <span class="s2">"0x1"</span><span class="p">,</span> <span class="c1">// 1</span>
  <span class="s2">"toBlock"</span><span class="p">:</span> <span class="s2">"0x2"</span><span class="p">,</span> <span class="c1">// 2</span>
  <span class="s2">"address"</span><span class="p">:</span> <span class="s2">"0x8888f1f195afa192cfee860698584c030f4c9db1"</span><span class="p">,</span>
  <span class="s2">"topics"</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b"</span><span class="p">,</span> <span class="c1">// This topic in first position</span>
    <span class="kc">null</span><span class="p">,</span> <span class="c1">// Any topic in second position</span>
    <span class="p">[</span>
      <span class="s2">"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b"</span><span class="p">,</span>
      <span class="s2">"0x000000000000000000000000aff3454fce5edbc8cca8697c15331677e6ebccc"</span>
    <span class="p">]</span> <span class="c1">// Either topic of the two in third position</span>
  <span class="p">]</span> <span class="c1">// ... and anything after</span>
<span class="p">}]</span>
</code></pre><h4 id='returns-31'>Returns</h4>
<ul>
<li><code>Quantity</code> - The filter id.</li>
</ul>
<h4 id='example-31'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_newFilter&quot;,&quot;params&quot;:[{&quot;fromBlock&quot;:&quot;0x1&quot;,&quot;toBlock&quot;:&quot;0x2&quot;,&quot;address&quot;:&quot;0x8888f1f195afa192cfee860698584c030f4c9db1&quot;,&quot;topics&quot;:[&quot;0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b&quot;,null,[&quot;0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b&quot;,&quot;0x000000000000000000000000aff3454fce5edbc8cca8697c15331677e6ebccc&quot;]]}],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x1&quot; // 1
}
</code></p>

<hr>
<h3 id='eth_newpendingtransactionfilter'>eth_newPendingTransactionFilter</h3>
<p>Creates a filter in the node, to notify when new pending transactions arrive.</p>

<p>To check if the state has changed, call <a href="#eth_getfilterchanges">eth_getFilterChanges</a>.</p>
<h4 id='parameters-32'>Parameters</h4>
<p>None</p>
<h4 id='returns-32'>Returns</h4>
<ul>
<li><code>Quantity</code> - A filter id.</li>
</ul>
<h4 id='example-32'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_newPendingTransactionFilter&quot;,&quot;params&quot;:[],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x1&quot; // 1
}
</code></p>

<hr>
<h3 id='eth_protocolversion'>eth_protocolVersion</h3>
<p>Returns the current ethereum protocol version.</p>
<h4 id='parameters-33'>Parameters</h4>
<p>None</p>
<h4 id='returns-33'>Returns</h4>
<ul>
<li><code>String</code> - The current ethereum protocol version.</li>
</ul>
<h4 id='example-33'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_protocolVersion&quot;,&quot;params&quot;:[],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0x63&quot; // 99
}
</code></p>

<hr>
<h3 id='eth_sendrawtransaction'>eth_sendRawTransaction</h3>
<p>Creates new message call transaction or a contract creation for signed transactions.</p>

<p><strong>Note:</strong> <code>eth_submitTransaction</code> is an alias of this method.</p>
<h4 id='parameters-34'>Parameters</h4>
<ol>
<li><code>Data</code> - The signed transaction data.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span><span class="s2">"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"</span><span class="p">]</span>
</code></pre><h4 id='returns-34'>Returns</h4>
<ul>
<li><code>Hash</code> - 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available</li>
</ul>

<p>Use <a href="#eth_gettransactionreceipt">eth_getTransactionReceipt</a> to get the contract address, after the transaction was mined, when you created a contract.</p>
<h4 id='example-34'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_sendRawTransaction&quot;,&quot;params&quot;:[&quot;0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;
}
</code></p>

<hr>
<h3 id='eth_sendtransaction'>eth_sendTransaction</h3>
<p>Creates new message call transaction or a contract creation, if the data field contains code.</p>
<h4 id='parameters-35'>Parameters</h4>
<ol>
<li><code>Object</code> - The transaction object.

<ul>
<li><code>from</code>:   <code>Address</code> - 20 Bytes - The address the transaction is send from.</li>
<li><code>to</code>:   <code>Address</code> - (optional) 20 Bytes - The address the transaction is directed to.</li>
<li><code>gas</code>:   <code>Quantity</code> - (optional) Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions.</li>
<li><code>gasPrice</code>:   <code>Quantity</code> - (optional) Integer of the gas price used for each paid gas.</li>
<li><code>value</code>:   <code>Quantity</code> - (optional) Integer of the value sent with this transaction.</li>
<li><code>data</code>:   <code>Data</code> - (optional) 4 byte hash of the method signature followed by encoded parameters. For details see <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">Ethereum Contract ABI</a>.</li>
<li><code>nonce</code>:   <code>Quantity</code> - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce.</li>
<li><code>condition</code>:   <code>Object</code> - (optional) Conditional submission of the transaction. Can be either an integer block number <code>{ block: 1 }</code> or UTC timestamp (in seconds) <code>{ time: 1491290692 }</code> or <code>null</code>.</li>
</ul></li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[{</span>
  <span class="s2">"from"</span><span class="p">:</span> <span class="s2">"0xb60e8dd61c5d32be8058bb8eb970870f07233155"</span><span class="p">,</span>
  <span class="s2">"to"</span><span class="p">:</span> <span class="s2">"0xd46e8dd67c5d32be8058bb8eb970870f07244567"</span><span class="p">,</span>
  <span class="s2">"gas"</span><span class="p">:</span> <span class="s2">"0x76c0"</span><span class="p">,</span> <span class="c1">// 30400</span>
  <span class="s2">"gasPrice"</span><span class="p">:</span> <span class="s2">"0x9184e72a000"</span><span class="p">,</span> <span class="c1">// 10000000000000</span>
  <span class="s2">"value"</span><span class="p">:</span> <span class="s2">"0x9184e72a"</span><span class="p">,</span> <span class="c1">// 2441406250</span>
  <span class="s2">"data"</span><span class="p">:</span> <span class="s2">"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"</span>
<span class="p">}]</span>
</code></pre><h4 id='returns-35'>Returns</h4>
<ul>
<li><code>Hash</code> - 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available.</li>
</ul>

<p>Use <a href="#eth_gettransactionreceipt">eth_getTransactionReceipt</a> to get the contract address, after the transaction was mined, when you created a contract.</p>
<h4 id='example-35'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_sendTransaction&quot;,&quot;params&quot;:[{&quot;from&quot;:&quot;0xb60e8dd61c5d32be8058bb8eb970870f07233155&quot;,&quot;to&quot;:&quot;0xd46e8dd67c5d32be8058bb8eb970870f07244567&quot;,&quot;gas&quot;:&quot;0x76c0&quot;,&quot;gasPrice&quot;:&quot;0x9184e72a000&quot;,&quot;value&quot;:&quot;0x9184e72a&quot;,&quot;data&quot;:&quot;0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675&quot;}],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331&quot;
}
</code></p>

<hr>
<h3 id='eth_sign'>eth_sign</h3>
<p>The sign method calculates an Ethereum specific signature with: <code>sign(keccak256(&quot;Ethereum Signed Message:
&quot; + len(message) + message)))</code>.</p>
<h4 id='parameters-36'>Parameters</h4>
<ol>
<li><code>Address</code> - 20 Bytes - address.</li>
<li><code>Data</code> - Data which hash to sign.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0xcd2a3d9f938e13cd947ec05abc7fe734df8dd826"</span><span class="p">,</span>
  <span class="s2">"0x5363686f6f6c627573"</span> <span class="c1">// Schoolbus</span>
<span class="p">]</span>
</code></pre><h4 id='returns-36'>Returns</h4>
<ul>
<li><code>Data</code> - Signed data.</li>
</ul>
<h4 id='example-36'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_sign&quot;,&quot;params&quot;:[&quot;0xcd2a3d9f938e13cd947ec05abc7fe734df8dd826&quot;,&quot;0x5363686f6f6c627573&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: &quot;0xb1092cb5b23c2aa55e5b5787729c6be812509376de99a52bea2b41e5a5f8601c5641e74d01e4493c17bf1ef8b179c49362b2c721222128d58422a539310c6ecd1b&quot;
}
</code></p>

<hr>
<h3 id='eth_signtransaction'>eth_signTransaction</h3>
<p>Signs transactions without dispatching it to the network. It can be later submitted using <a href="#eth_sendrawtransaction">eth_sendRawTransaction</a>.</p>
<h4 id='parameters-37'>Parameters</h4>
<ol>
<li><code>Object</code> - Transaction object, see <a href="#eth_sendTransaction">eth_sendTransaction</a>.

<ul>
<li><code>from</code>:   <code>Address</code> - 20 Bytes - The address the transaction is send from.</li>
<li><code>to</code>:   <code>Address</code> - (optional) 20 Bytes - The address the transaction is directed to.</li>
<li><code>gas</code>:   <code>Quantity</code> - (optional) Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions.</li>
<li><code>gasPrice</code>:   <code>Quantity</code> - (optional) Integer of the gas price used for each paid gas.</li>
<li><code>value</code>:   <code>Quantity</code> - (optional) Integer of the value sent with this transaction.</li>
<li><code>data</code>:   <code>Data</code> - (optional) 4 byte hash of the method signature followed by encoded parameters. For details see <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI">Ethereum Contract ABI</a>.</li>
<li><code>nonce</code>:   <code>Quantity</code> - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce.</li>
<li><code>condition</code>:   <code>Object</code> - (optional) Conditional submission of the transaction. Can be either an integer block number <code>{ block: 1 }</code> or UTC timestamp (in seconds) <code>{ time: 1491290692 }</code> or <code>null</code>.</li>
</ul></li>
</ol>
<h4 id='returns-37'>Returns</h4>
<ul>
<li><code>Object</code> - Signed transaction and it&#39;s details:

<ul>
<li><code>raw</code>:   <code>Data</code> - The signed, RLP encoded transaction.</li>
<li><code>tx</code>:   <code>Object</code> - Transaction object:

<ul>
<li><code>hash</code>:   <code>Hash</code> - 32 Bytes - hash of the transaction.</li>
<li><code>nonce</code>:   <code>Quantity</code> - the number of transactions made by the sender prior to this one.</li>
<li><code>blockHash</code>:   <code>Hash</code> - 32 Bytes - hash of the block where this transaction was in. <code>null</code> when its pending.</li>
<li><code>blockNumber</code>:   <code>Quantity</code> or <code>Tag</code> - block number where this transaction was in. <code>null</code> when its pending.</li>
<li><code>transactionIndex</code>:   <code>Quantity</code> - integer of the transactions index position in the block. <code>null</code> when its pending.</li>
<li><code>from</code>:   <code>Address</code> - 20 Bytes - address of the sender.</li>
<li><code>to</code>:   <code>Address</code> - 20 Bytes - address of the receiver. <code>null</code> when its a contract creation transaction.</li>
<li><code>value</code>:   <code>Quantity</code> - value transferred in Wei.</li>
<li><code>gasPrice</code>:   <code>Quantity</code> - gas price provided by the sender in Wei.</li>
<li><code>gas</code>:   <code>Quantity</code> - gas provided by the sender.</li>
<li><code>input</code>:   <code>Data</code> - the data send along with the transaction.</li>
<li><code>v</code>:   <code>Quantity</code> - the standardised V field of the signature.</li>
<li><code>standard_v</code>:   <code>Quantity</code> - the standardised V field of the signature (0 or 1).</li>
<li><code>r</code>:   <code>Quantity</code> - the R field of the signature.</li>
<li><code>raw</code>:   <code>Data</code> - raw transaction data</li>
<li><code>publicKey</code>:   <code>Hash</code> - public key of the signer.</li>
<li><code>chainId</code>:   <code>Quantity</code> - the chain id of the transaction, if any.</li>
<li><code>creates</code>:   <code>Hash</code> - creates contract hash</li>
<li><code>condition</code>:   <code>Object</code> - (optional) conditional submission, Block number in <code>block</code> or timestamp in <code>time</code> or <code>null</code>. (parity-feature)</li>
</ul></li>
</ul></li>
</ul>
<h4 id='example-37'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_signTransaction&quot;,&quot;params&quot;:[{ ... }],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: {
    &quot;raw&quot;: &quot;0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675&quot;,
    &quot;tx&quot;: {
      &quot;hash&quot;: &quot;0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b&quot;,
      &quot;nonce&quot;: &quot;0x0&quot;, // 0
      &quot;blockHash&quot;: &quot;0xbeab0aa2411b7ab17f30a99d3cb9c6ef2fc5426d6ad6fd9e2a26a6aed1d1055b&quot;,
      &quot;blockNumber&quot;: &quot;0x15df&quot;, // 5599
      &quot;transactionIndex&quot;: &quot;0x1&quot;, // 1
      &quot;from&quot;: &quot;0x407d73d8a49eeb85d32cf465507dd71d507100c1&quot;,
      &quot;to&quot;: &quot;0x853f43d8a49eeb85d32cf465507dd71d507100c1&quot;,
      &quot;value&quot;: &quot;0x7f110&quot;, // 520464
      &quot;gas&quot;: &quot;0x7f110&quot;, // 520464
      &quot;gasPrice&quot;: &quot;0x09184e72a000&quot;,
      &quot;input&quot;: &quot;0x603880600c6000396000f300603880600c6000396000f3603880600c6000396000f360&quot;
    }
  }
}
</code></p>

<hr>
<h3 id='eth_submithashrate'>eth_submitHashrate</h3>
<p>Used for submitting mining hashrate.</p>
<h4 id='parameters-38'>Parameters</h4>
<ol>
<li><code>Data</code> - a hexadecimal string representation (32 bytes) of the hash rate.</li>
<li><code>Data</code> - A random hexadecimal(32 bytes) ID identifying the client.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0x0000000000000000000000000000000000000000000000000000000000500000"</span><span class="p">,</span>
  <span class="s2">"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c"</span>
<span class="p">]</span>
</code></pre><h4 id='returns-38'>Returns</h4>
<ul>
<li><code>Boolean</code> - <code>true</code> if submitting went through succesfully and <code>false</code> otherwise.</li>
</ul>
<h4 id='example-38'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_submitHashrate&quot;,&quot;params&quot;:[&quot;0x0000000000000000000000000000000000000000000000000000000000500000&quot;,&quot;0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: true
}
</code></p>

<hr>
<h3 id='eth_submitwork'>eth_submitWork</h3>
<p>Used for submitting a proof-of-work solution.</p>
<h4 id='parameters-39'>Parameters</h4>
<ol>
<li><code>Data</code> - 8 Bytes - The nonce found (64 bits).</li>
<li><code>Data</code> - 32 Bytes - The header&#39;s pow-hash (256 bits)</li>
<li><code>Data</code> - 32 Bytes - The mix digest (256 bits).</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0x0000000000000001"</span><span class="p">,</span>
  <span class="s2">"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"</span><span class="p">,</span>
  <span class="s2">"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000"</span>
<span class="p">]</span>
</code></pre><h4 id='returns-39'>Returns</h4>
<ul>
<li><code>Boolean</code> - <code>true</code> if the provided solution is valid, otherwise <code>false</code>.</li>
</ul>
<h4 id='example-39'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_submitWork&quot;,&quot;params&quot;:[&quot;0x0000000000000001&quot;,&quot;0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef&quot;,&quot;0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: true
}
</code></p>

<hr>
<h3 id='eth_syncing'>eth_syncing</h3>
<p>Returns an object with data about the sync status or <code>false</code>.</p>
<h4 id='parameters-40'>Parameters</h4>
<p>None</p>
<h4 id='returns-40'>Returns</h4>
<ul>
<li><code>Object</code> - An object with sync status data or <code>FALSE</code>, when not syncing.

<ul>
<li><code>startingBlock</code>:   <code>Quantity</code> - The block at which the import started (will only be reset, after the sync reached this head)</li>
<li><code>currentBlock</code>:   <code>Quantity</code> - The current block, same as eth_blockNumber</li>
<li><code>highestBlock</code>:   <code>Quantity</code> - The estimated highest block</li>
<li><code>blockGap</code>:   <code>Array</code> - Array of &quot;first&quot;, &quot;last&quot;, such that [first, last) are all missing from the chain</li>
<li><code>warpChunksAmount</code>:   <code>Quantity</code> - Total amount of snapshot chunks</li>
<li><code>warpChunksProcessed</code>:   <code>Quantity</code> - Total amount of snapshot chunks processed</li>
</ul></li>
</ul>
<h4 id='example-40'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_syncing&quot;,&quot;params&quot;:[],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: {
    &quot;startingBlock&quot;: &quot;0x384&quot;, // 900
    &quot;currentBlock&quot;: &quot;0x386&quot;, // 902
    &quot;highestBlock&quot;: &quot;0x454&quot; // 1108
  } // Or `false` when not syncing
}
</code></p>

<hr>
<h3 id='eth_uninstallfilter'>eth_uninstallFilter</h3>
<p>Uninstalls a filter with given id. Should always be called when watch is no longer needed.
Additonally Filters timeout when they aren&#39;t requested with <a href="#eth_getfilterchanges">eth_getFilterChanges</a> for a period of time.</p>
<h4 id='parameters-41'>Parameters</h4>
<ol>
<li><code>Quantity</code> - The filter id.</li>
</ol>
<pre class="highlight javascript"><code><span class="nx">params</span><span class="p">:</span> <span class="p">[</span>
  <span class="s2">"0xb"</span> <span class="c1">// 11</span>
<span class="p">]</span>
</code></pre><h4 id='returns-41'>Returns</h4>
<ul>
<li><code>Boolean</code> - <code>true</code> if the filter was successfully uninstalled, otherwise <code>false</code>.</li>
</ul>
<h4 id='example-41'>Example</h4>
<p>Request
<code>bash
curl --data &#39;{&quot;method&quot;:&quot;eth_uninstallFilter&quot;,&quot;params&quot;:[&quot;0xb&quot;],&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;}&#39; -H &quot;Content-Type: application/json&quot; -X POST localhost:8545
</code></p>

<p>Response
<code>js
{
  &quot;id&quot;: 1,
  &quot;jsonrpc&quot;: &quot;2.0&quot;,
  &quot;result&quot;: true
}
</code></p>

<h1 id='formatting'>Formatting</h1>
<ul>
<li>Indent using tabs</li>
<li>Lines should be longer than 100 characters long only in exceptional circumstances and certainly no longer than 120. For this purpose, tabs are considered 4 characters wide.</li>
<li>Indent levels should be greater than 5 only in exceptional circumstances and certainly no greater than 8. If they are greater than 5, then consider using <code>let</code> or auxiliary functions in order to strip out complex inline expressions.</li>
<li>Never have spaces on a line prior to a non-whitespace character</li>
<li>Follow-on lines are only ever a single indent from the original line.</li>
</ul>
<pre class="highlight rust tab-rust"><code><span class="k">fn</span> <span class="nf">calculation</span><span class="p">(</span><span class="n">some_long_variable_a</span><span class="p">:</span> <span class="nb">i8</span><span class="p">,</span> <span class="n">some_long_variable_b</span><span class="p">:</span> <span class="nb">i8</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">some_long_variable_a</span> <span class="o">*</span> <span class="n">some_long_variable_b</span>
        <span class="err">-</span> <span class="n">some_long_variable_b</span> <span class="err">/</span> <span class="n">some_long_variable_a</span>
        <span class="o">+</span> <span class="nf">sqrt</span><span class="p">(</span><span class="n">some_long_variable_a</span><span class="p">)</span> <span class="err">-</span> <span class="nf">sqrt</span><span class="p">(</span><span class="n">some_long_variable_b</span><span class="p">);</span>
    <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">10</span>
<span class="p">}</span>
</code></pre>
<ul>
<li>Indent level should follow open parens/brackets, but should be collapsed to the smallest number of levels actually used:</li>
</ul>
<pre class="highlight rust tab-rust"><code><span class="k">fn</span> <span class="nf">calculate</span><span class="p">(</span>
    <span class="n">some_long_variable_a</span><span class="p">:</span> <span class="nb">f32</span><span class="p">,</span>
    <span class="n">some_long_variable_b</span><span class="p">:</span> <span class="nb">f32</span><span class="p">,</span>
    <span class="n">some_long_variable_c</span><span class="p">:</span> <span class="nb">f32</span><span class="p">,</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">f32</span> <span class="p">{</span>
    <span class="p">(</span><span class="err">-</span><span class="n">some_long_variable_b</span> <span class="o">+</span> <span class="nf">sqrt</span><span class="p">(</span>
        <span class="c">// two parens open, but since we open &amp; close them both on the</span>
        <span class="c">// same line, only one indent level is used</span>
        <span class="n">some_long_variable_b</span> <span class="o">*</span> <span class="n">some_long_variable_b</span>
        <span class="err">-</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">some_long_variable_a</span> <span class="o">*</span> <span class="n">some_long_variable_c</span>
    <span class="c">// both closed here at beginning of line, so back to the original indent</span>
    <span class="c">// level</span>
    <span class="p">))</span> <span class="err">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">some_long_variable_a</span><span class="p">)</span>
<span class="p">}</span>
</code></pre>
<ul>
<li><code>where</code> is indented, and its items are indented one further</li>
<li>Argument lists or function invocations too long to fit on one line are indented similarly to code blocks, and once one param is indented in such a way, all others should be, too. Run-on parameter lists are also acceptable for single-line run-ons of basic function calls.</li>
</ul>
<pre class="highlight rust tab-rust"><code><span class="c">// OK</span>
<span class="k">fn</span> <span class="nf">foo</span><span class="p">(</span>
    <span class="n">really_long_parameter_name_1</span><span class="p">:</span> <span class="n">SomeLongTypeName</span><span class="p">,</span>
    <span class="n">really_long_parameter_name_2</span><span class="p">:</span> <span class="n">SomeLongTypeName</span><span class="p">,</span>
    <span class="n">shrt_nm_1</span><span class="p">:</span> <span class="nb">u8</span><span class="p">,</span>
    <span class="n">shrt_nm_2</span><span class="p">:</span> <span class="nb">u8</span><span class="p">,</span>
<span class="p">)</span> <span class="p">{</span>
   <span class="err">...</span>
<span class="p">}</span>

<span class="c">// NOT OK</span>
<span class="k">fn</span> <span class="nf">foo</span><span class="p">(</span><span class="n">really_long_parameter_name_1</span><span class="p">:</span> <span class="n">SomeLongTypeName</span><span class="p">,</span> <span class="n">really_long_parameter_name_2</span><span class="p">:</span> <span class="n">SomeLongTypeName</span><span class="p">,</span>
    <span class="n">shrt_nm_1</span><span class="p">:</span> <span class="nb">u8</span><span class="p">,</span> <span class="n">shrt_nm_2</span><span class="p">:</span> <span class="nb">u8</span><span class="p">)</span> <span class="p">{</span>
    <span class="err">...</span>
<span class="p">}</span>

</code></pre><pre class="highlight rust tab-rust"><code><span class="p">{</span>
    <span class="c">// Complex line (not just a function call, also a let statement). Full</span>
    <span class="c">// structure.</span>
    <span class="k">let</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="nf">bar</span><span class="p">(</span>
        <span class="n">really_long_parameter_name_1</span><span class="p">,</span>
        <span class="n">really_long_parameter_name_2</span><span class="p">,</span>
        <span class="n">shrt_nm_1</span><span class="p">,</span>
        <span class="n">shrt_nm_2</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c">// Long, simple function call.</span>
    <span class="nf">waz</span><span class="p">(</span>
        <span class="n">really_long_parameter_name_1</span><span class="p">,</span> 
        <span class="n">really_long_parameter_name_2</span><span class="p">,</span>
        <span class="n">shrt_nm_1</span><span class="p">,</span> 
        <span class="n">shrt_nm_2</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c">// Short function call. Inline.</span>
    <span class="nf">baz</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>
<ul>
<li>Always end last item of a multi-line comma-delimited set with <code>,</code> when legal:</li>
</ul>
<pre class="highlight rust tab-rust"><code><span class="k">struct</span> <span class="n">Point</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="n">x</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span>
    <span class="n">y</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span>    <span class="c">// &lt;-- Multiline comma-delimited lists end with a trailing ,</span>
<span class="p">}</span>

<span class="c">// Single line comma-delimited items do not have a trailing `,`</span>
<span class="k">enum</span> <span class="n">Meal</span> <span class="p">{</span> <span class="n">Breakfast</span><span class="p">,</span> <span class="n">Lunch</span><span class="p">,</span> <span class="n">Dinner</span> <span class="p">};</span>
</code></pre>
<ul>
<li>Avoid trailing <code>;</code>s where unneeded.</li>
</ul>
<pre class="highlight rust tab-rust"><code><span class="k">if</span> <span class="n">condition</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">1</span>    <span class="c">// &lt;-- no ; here</span>
<span class="p">}</span>
</code></pre>
<ul>
<li><code>match</code> arms may be either blocks or have a trailing <code>,</code> but not both.</li>
<li>Blocks should not be used unnecessarily.</li>
</ul>
<pre class="highlight rust tab-rust"><code><span class="k">match</span> <span class="n">meal</span> <span class="p">{</span>
    <span class="nn">Meal</span><span class="p">::</span><span class="n">Breakfast</span> <span class="k">=&gt;</span> <span class="s">"eggs"</span><span class="p">,</span>
    <span class="nn">Meal</span><span class="p">::</span><span class="n">Lunch</span> <span class="k">=&gt;</span> <span class="p">{</span> <span class="nf">check_diet</span><span class="p">();</span> <span class="nf">recipe</span><span class="p">()</span> <span class="p">},</span>
<span class="c">//  Meal::Dinner =&gt; { return Err("Fasting") }   // WRONG</span>
    <span class="nn">Meal</span><span class="p">::</span><span class="n">Dinner</span> <span class="k">=&gt;</span> <span class="k">return</span> <span class="nf">Err</span><span class="p">(</span><span class="s">"Fasting"</span><span class="p">),</span>
<span class="p">}</span>
</code></pre><h1 id='style'>Style</h1>
<ul>
<li>Panickers require explicit proofs they don&#39;t trigger. Calling <code>unwrap</code> is discouraged. The exception 
to this rule is test code. Avoiding panickers by restructuring code is preferred if feasible.</li>
</ul>
<pre class="highlight rust tab-rust"><code><span class="k">let</span> <span class="k">mut</span> <span class="n">target_path</span> <span class="o">=</span> 
    <span class="k">self</span><span class="nf">.path</span><span class="p">()</span><span class="nf">.expect</span><span class="p">(</span>
        <span class="s">"self is instance of DiskDirectory;</span><span class="err">\</span><span class="s">
        DiskDirectory always returns path;</span><span class="err">\</span><span class="s">
        qed"</span>
    <span class="p">);</span>
</code></pre>
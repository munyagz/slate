<h2 id='secret-store'>Secret Store</h2>
<hr>
<h2 id='title-secret-store'>title: Secret Store</h2>
<p>The Parity Secret Store is core technology that enables:
- distributed elliptic curve (EC) key pair generation - key is generated by several parties using special cryptographic protocol, so that:
    - private key portion remains unknown to every single party;
    - public key portion could be computed on every party and could be safely exposed to external entities;
    - every party hold the &#39;share&#39; of the private key;
    - any subset of <code>t+1</code> parties could unite to restore the private portion of the key;
    - any subset of <strong>less than</strong> <code>t+1</code> parties could not restore the private portion of the key;
- distributed key storage - private key shares are stored separately by every party and are never exposed neither to another parties, nor to external entities;
- threshold retrieval according to blockchain permissions - all operations that are requiring private key, require at least <code>t+1</code> parties to agree on &#39;Permissioning contract&#39; state.</p>
<h2 id='glossary'>Glossary</h2>
<p>Terms that are being used on this page:
- <strong>node</strong> or <strong>key server</strong>: specially configured Parity instance, which can participate in distributed EC key pair generation (or related) sessions;
- <strong>Secret Store</strong>: fully connected network of <strong>nodes</strong>, which is used to generate and store same set of keys;
- <strong>key scheme</strong>: a pair of numbers <code>t</code> and <code>N</code>, expressed as <code>(t+1)-of-N</code>, that is used as a parameter to <strong>key generation session</strong>:
    - <strong>N</strong>: is the current number of <strong>nodes</strong> in <strong>Secret Store</strong>;
    - <strong>t</strong>: is the key threshold, meaning that subset of <code>t+1</code> <strong>nodes</strong> is required for operations, involving private portion of the key;
- <strong>server key generation session</strong>: process of single <strong>server key</strong> generation, using given <strong>server key id</strong> and <strong>key scheme</strong>;
    - <strong>server key</strong>: EC key pair that has been generated using <strong>server key generation session</strong>;
    - <strong>server key id</strong>: 256-bit value, used as unique identifier of <strong>server key</strong>;
    - <strong>server key share</strong>: is an artifact of <strong>server key generation session</strong>, that is stored on each node, participated in this session and can be used later to restore private portion of <strong>server key</strong>;
- <strong>document key generation session</strong>: process of generating single <strong>document key</strong>, used to encrypt <strong>document</strong>:
    - <strong>document</strong>: some document, that need to be externally-stored in encrypted form;
    - <strong>document encryption</strong>: process of encrypting <strong>document</strong> contents, running outside of <strong>Secret Store</strong> (i.e. it is <strong>Secret Store</strong> client who is choosing encryption algorithm and implementing encryption code);
    - <strong>document key</strong>: input key for <strong>document encryption</strong>, which is generated by <strong>Secret Store</strong> in <strong>document key generation session</strong> and is stored on <strong>nodes</strong>, encrypted by <strong>server key</strong>;
- <strong>permissioning sessions</strong>: are sessions that require access to existing <strong>server key shares</strong> to compute some values:
    - <strong>permissioning contract</strong>: blockchain contract, that is used to check if requester has permissions to run <strong>permissioning sessions</strong> with given <strong>server key</strong>;
    - <strong>document key retrieval session</strong>: process of restoring (decrypting) single <strong>document key</strong> and returning it to the requester;
    - <strong>signing session</strong>: process of computing message hash&#39; signature with previously generated <strong>server key</strong>;
- <strong>key servers set change session</strong>: process of migrating secret shares from &#39;old&#39; <strong>nodes</strong> set to new <strong>nodes</strong> set, when one/some of <strong>nodes</strong> are being added/removed to/from <strong>Secret Store</strong>.</p>
<h2 id='glossary-illustrated'>Glossary illustrated</h2>
<p><img src="/images/Secret-Store-Glossary-Illustrated.png" alt="Secret-Store-Glossary-Illustrated" /></p>

<p>Above is the illustration of <strong>Secret Store</strong>, which:
- consists of 3 <strong>nodes</strong>, which are connected to each other, using encrypted connections;
- contains 2 <strong>server keys</strong>:
    - server key with <strong>id</strong> = 1, generated using <strong>key scheme</strong> 3-of-3 (<strong>t</strong> is 2 and <strong>N</strong> is 3). Every <strong>node</strong> holds the <strong>share</strong> of this <strong>server key</strong> (<strong>shares</strong> are: <code>S1_1</code>, <code>S1_2</code> and <code>S1_3</code>). Every node holds the public portion of this key (<code>PUB1</code>). All three shares are required to restore private portion of this key (<code>PRIV1 = S1_1 + S1_2 + S1_3</code>);
    - server key with <strong>id</strong> = 2, generated using <strong>key scheme</strong> 2-of-3 (<strong>t</strong> is 1 and <strong>N</strong> is 3). Every <strong>node</strong> holds the <strong>share</strong> of this <strong>server key</strong> (<strong>shares</strong> are: <code>S2_1</code>, <code>S2_2</code> and <code>S2_3</code>). Every node holds the public portion of this key (<code>PUB2</code>). Any two shares are required to restore the private portion of this key (<code>PRIV2 = S2_1 + S2_2 = S2_1 + S2_3 = S2_2 + S2_3</code>);
- contains one <strong>document key</strong> (<code>D2</code>), bound to server key with <strong>id</strong> 2. <code>D2</code> is stored in encrypted form and <code>PRIV2</code> is required to decrypt it.</p>

<p>There are 4 entities, which are not a part of <strong>Secret Store</strong>:
- <code>Alice</code> and <code>Bob</code> are clients of <strong>Secret Store</strong>, which are using its API to read and store keys;
- <strong>permissioning contract</strong>, which contains rules that:
    - allow <code>Alice</code> to run <strong>permissioning sessions</strong> with server key with <strong>id</strong> = 1. Since <strong>server key</strong> 1 doesn&#39;t have <strong>document key</strong> bound to it, it only makes sense for Alice to run <strong>signing sessions</strong> to sign messages with the private portion of key 1 (<code>PRIV1</code>);
    - allow <code>Bob</code> to run <strong>permissioning sessions</strong> with server key with <strong>id</strong> = 2. Since <strong>server key</strong> 1 has <strong>document key</strong> bound to it, <code>Bob</code> can run <strong>document key retrieval sessions</strong> (to use <code>PRIV2</code> to decrypt <code>D2</code> and return it, encrypted with <code>Bob</code>&#39; public key) along with <strong>signing sessions</strong> (to sign messages using <code>PRIV2</code>);
- <strong>node</strong> (<code>NODE4</code>), that is not currently a part of <strong>Secret Store</strong>.</p>

<p>Following are examples of API calls that will succeed:
- <code>Alice</code> runs <a href="#server-key-generation-session"><strong>server key generation session</strong></a> to generate a new <strong>server key</strong> with <strong>id</strong> = 3;
- <code>Alice</code> runs <a href="#server-and-document-key-generation-session"><strong>server and document key generation session</strong></a> to generate new <strong>server key</strong> with <strong>id</strong> = 4 and simultaneously bound <strong>document key</strong> to it;
- <code>Alice</code> runs <a href="#document-key-storing-session"><strong>document key storing session</strong></a> to bound new document key to <strong>server key</strong> 1;
- <code>Alice</code> runs <a href="#schnorr-signing-session"><strong>Schnorr signing session</strong></a> to sign message using private portion of <strong>server key</strong> 1 (<code>PRIV1</code>);
- <code>Bob</code> runs <a href="#document-key-shadow-retrieval-session"><strong>document key shadow retrieval session</strong></a> to retrieve <strong>document key</strong>, bound to <strong>server key</strong> 2, without revealing it to any of <strong>nodes</strong>;
- <code>Bob</code> runs <a href="#document-key-retrieval-session"><strong>document key retrieval session</strong></a> to retrieve <strong>document key</strong>, bound to <strong>server key</strong> 2;
- administrator runs <a href="Secret-Store-Configuration.md#changing-servers-set-configuration"><strong>nodes set change session</strong></a> to add <code>NODE4</code> to the <strong>Secret Store</strong> so that it will receive additional shares of both <strong>server keys</strong>.</p>
<h2 id='secret-store-configuration'>Secret Store configuration</h2>
<p>Please see <a href="Secret-Store-Configuration.md">Secret Store configuration</a> for detailed description of configuration options.</p>
<h2 id='server-key-generation-session'>Server key generation session</h2>
<p>To generate server key, you should carefully select following parameters:
- server key id: if you&#39;re planning to link document key to this server key later, it would be good to use document contents hash as this identifier. Otherwise, it could be a random value. In both cases, please note that this value is unique and can not be changed later;
- server key id signature: it is the server key id, signed with author&#39; private key. Only author of server key could bind document key to this server key later. This signature could be generated by <a href="JSONRPC-secretstore-module.md#secretstore_signrawhash"><code>secretstore_signRawHash</code></a> RPC method (please see the method description if you&#39;re planning to generate the signature by other means);
- key threshold (t): it is up to you to select the threshold, but following must be taken into account:
    - <code>t</code> must always be less than <code>N</code>;
    - since <code>N</code> could decrease when nodes are going offline, or are excluded from Secret Store, it should not be too close to <code>N-1</code>;
    - since any <code>t+1</code> subset of nodes are able to restore the private portion of server key, <code>t</code> should not be too close to zero. Otherwise there could be a chance that there are enough adversary nodes to access your private data;
    - <code>t</code> equal to zero means that every node holds the private portion of server key and there are no advantages in using Secret Store over simple holding the key in safe place;
    - <em>(possibly to be reconsidered)</em> if you&#39;re planning to use this key to generate ECDSA signatures, <code>t</code> must be chosen so that following is always true <code>2*t &lt; N</code> (please also read note about <code>N</code> decreasing).</p>

<p>To run session, execute following command (here and below we will use HTTP API of SecretStore for examples):
<code>
curl -X POST http://localhost:8082/shadow/0000000000000000000000000000000000000000000000000000000000000003/bd22d48735e5d711fffa03d9a987366acd50359a7a27f2fb0480e5339a44bf155b36ee1f2f860f4fcbb1171cf68dd59ac5f95d407137cafec4898f3e562fa9d700/1
</code></p>

<p>Here:
- <code>http://localhost:8082</code>: is the address on which node is listening for incoming requests;
- <code>0000000000000000000000000000000000000000000000000000000000000003</code>: is the hex-encoded server key id;
- <code>bd22d48735e5d711fffa03d9a987366acd50359a7a27f2fb0480e5339a44bf155b36ee1f2f860f4fcbb1171cf68dd59ac5f95d407137cafec4898f3e562fa9d700</code>: is the hex-encoded signed server key id;
- <code>1</code>: is the key threshold value.</p>

<p>If session was successful, HTTP response code is 200 and body is the hex-encoded public portion of server key:
<code>
&quot;0xe54804602b1b5675f429f64233c2a9461f4d00d146441c0c7296cddbb7f50e1eef91d88f92585b050aa2feca8e206d8d763d118ce45b9ebcd238893ca85e6092&quot;
</code>
If error has occurred during session, HTTP response code is in errors range and body is the description of the error:
<code>
&quot;\&quot;Internal error: session with the same id is already registered\&quot;&quot;
</code></p>

<p>Please note, that while it is only <code>t+1</code> nodes are required to restore the private portion of server key, all <code>N</code> nodes are required to generate server key. This assures us that we will be able to restore the private, even if <code>N</code> is decreased by some reason. So this means that all Secret Store nodes must be online and connected to each other in order to run this session.</p>

<p>Implementation is based on <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.124.4128&amp;rank=1">ECDKG: A Distributed Key Generation Protocol Based on Elliptic Curve Discrete Logarithm</a>.</p>
<h2 id='document-key-storing-session'>Document key storing session</h2>
<p><em>(subject to change)</em></p>

<p>After running server key generation session, you have an option to bind externally-generated document key to server key. You should prepare following parameters:
- server key id: it is the same id, that was used in server key generation session;
- server key id signature: it is the server key id, signed by the same entity (author) that has signed signed server key id in server key generation session;
- &#39;common point&#39; and &#39;encrypted point&#39;: is the document key, externally encrypted by public server key, using special procedure (RPCs for generating these values are coming). For now, please reference to Parity code <a href="https://github.com/paritytech/parity-ethereum/blob/4763887a68d78f12f0f8e39d353e9d852ab95c7a/secret_store/src/key_server_cluster/math.rs#L224"><code>encrypt_secret</code></a>.</p>

<p>To run session, execute following command:
<code>
curl -X POST http://localhost:8082/shadow/0000000000000000000000000000000000000000000000000000000000000000/de12681e0b8f7a428f12a6694a5f7e1324deef3d627744d95d51b862afc13799251831b3611ae436c452b54cdf5c4e78b361a396ae183e8b4c34519e895e623c00/368244efaf441c2dabf7a723355a97b3b86f27bdb2827ae6f34ddece5132efd37af4ba808957b7113b4296bc4ae9ec7be38f9de6bae00504e775883a50d4658a/b7ad0603946987f1a154ae7f074e45da224eaa83704aac16a2d43a675d219654cf087b5d7aacce0790a65abbc1a495b26e71a5c6e9a4a71b543bf0048935bc13
</code></p>

<p>Here:
- <code>http://localhost:8082</code>: is the address on which node is listening for incoming requests;
- <code>0000000000000000000000000000000000000000000000000000000000000000</code>: is the hex-encoded server key id;
- <code>de12681e0b8f7a428f12a6694a5f7e1324deef3d627744d95d51b862afc13799251831b3611ae436c452b54cdf5c4e78b361a396ae183e8b4c34519e895e623c00</code>: is the hex-encoded signed server key id;
- <code>368244efaf441c2dabf7a723355a97b3b86f27bdb2827ae6f34ddece5132efd37af4ba808957b7113b4296bc4ae9ec7be38f9de6bae00504e775883a50d4658a</code>: is the hex-encoded common point portion of encrypted document key;
- <code>b7ad0603946987f1a154ae7f074e45da224eaa83704aac16a2d43a675d219654cf087b5d7aacce0790a65abbc1a495b26e71a5c6e9a4a71b543bf0048935bc13</code>: is the hex-encoded encrypted point portion of encrypted document key.</p>

<p>If session was successful, HTTP response code is 200 and the body is empty.
If error has occurred during session, HTTP response code is in errors range and body is the description of the error:
<code>
&quot;\&quot;Document not found\&quot;&quot;
</code></p>

<p>Please note that all Secret Store nodes must be online and connected to each other to run this session. Also, please note that there&#39;s could be at most one document key, bound to single server key. And it can be only bound once (i.e. you could only run document key storing session once for given server key id).</p>

<p>Implementation is based on <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.124.4128&amp;rank=1">ECDKG: A Distributed Key Generation Protocol Based on Elliptic Curve Discrete Logarithm</a>.</p>
<h2 id='server-and-document-key-generation-session'>Server and document key generation session</h2>
<p>While it is possible (and more secure, if you&#39;re not trusting to Secret Store nodes) to run separate server key generation and document key storing sessions, you could generate both keys simultaneously. In this case, document key is generated by one of the participating nodes.</p>

<p>To run session, you should carefully select following parameters:
- server key id: see server key generation session for details;
- server key id signature: it is the server key id, signed with requester private key;
- key threshold (t): see server key generation session for details.</p>

<p>To run session, execute the following command:
<code>
curl -X POST http://localhost:8082/0000000000000000000000000000000000000000000000000000000000000003/bd22d48735e5d711fffa03d9a987366acd50359a7a27f2fb0480e5339a44bf155b36ee1f2f860f4fcbb1171cf68dd59ac5f95d407137cafec4898f3e562fa9d700/1
</code></p>

<p>Here:
- <code>http://localhost:8082</code>: is the address on which node is listening for incoming requests;
- <code>0000000000000000000000000000000000000000000000000000000000000003</code>: is the hex-encoded server key id;
- <code>bd22d48735e5d711fffa03d9a987366acd50359a7a27f2fb0480e5339a44bf155b36ee1f2f860f4fcbb1171cf68dd59ac5f95d407137cafec4898f3e562fa9d700</code>: is the hex-encoded signed server key id;
- <code>1</code>: is the key threshold value.</p>

<p>If session was successful, HTTP response code is 200 and body is the hex-encoded document key, encrypted with requester public key (ECIES encryption is used):
<code>
&quot;0x04bfc447952f4d1818a49f6b30bbf42ef26d6a25844ea2d11cb93a8a7ac385de6c162edbd1c2b785061456b35075e620bd3991a7df5967a594c87bd199caf90810a463e02da8b3415d471495ad37fa069d287a830e72f27b565fc3f28b5888c1e16c4435ef801bc6ffd680767b82a3102268f53796b9fa61117138bd5c72bb5e0556d6d9e17ce850d499e344ae68c1b04cbde3077e9d2a4ba9cceb057d2d609133c479aa891adf38c3511424c2cbc86764&quot;
</code>
If error has occurred during session, HTTP response code is in errors range and body is the description of the error:
<code>
&quot;\&quot;Internal error: session with the same id is already registered\&quot;&quot;
</code></p>

<p>Please note that all Secret Store nodes must be online and connected to each other to run this session.</p>

<p>Technically, document key is the point on EC. One possible way of encrypting the document is to use the X coordinate of this point (or some derived value) as a key for some symmetric encryption algorithm (AES).</p>

<p>Implementation is based on <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.124.4128&amp;rank=1">ECDKG: A Distributed Key Generation Protocol Based on Elliptic Curve Discrete Logarithm</a>.</p>
<h2 id='permissioning-sessions'>Permissioning sessions</h2>
<p>The common part of all permissioning sessions is that they require at least <code>t+1</code> nodes to be online, fully connected and agree upon requester access to the server key (this is called &#39;consensus group&#39;). At the beginning, consensus is established - every node asks permissioning contract if the requester has an access to the key with given id. This means, that besides having the server key share, all nodes must be fully synchronized.</p>
<h3 id='permissioning-contract'>Permissioning contract</h3>
<p>The permissioning contract has to implement a single method:
<code>
function checkPermissions(address user, bytes32 document) constant returns (bool) {}
</code>
Returning <code>true</code> means that the owner of <code>user</code> address has an access to the server key with server key id <code>document</code>.</p>

<p>The contract address is specified in <code>acl_contract</code> parameter of the configuration file (by default it is read from the <code>secretstore_acl_checker</code> entry in the Registry).</p>
<h3 id='document-key-shadow-retrieval-session'>Document key shadow retrieval session</h3>
<p>This session is a preferable way of retrieving previously generated document key. To run this session, you will need to prepare following parameters:
- server key id: the id of previously generated server key, to which document key has been bound;
- server key id signature: it is the server key id, signed with the private key of requester, having access to the server key.</p>

<p>To run session, execute the following command:
<code>
curl http://localhost:8082/shadow/0000000000000000000000000000000000000000000000000000000000000000/de12681e0b8f7a428f12a6694a5f7e1324deef3d627744d95d51b862afc13799251831b3611ae436c452b54cdf5c4e78b361a396ae183e8b4c34519e895e623c00
</code></p>

<p>Here:
- <code>http://localhost:8082</code>: is the address on which node is listening for incoming requests;
- <code>0000000000000000000000000000000000000000000000000000000000000000</code>: is the hex-encoded server key id;
- <code>de12681e0b8f7a428f12a6694a5f7e1324deef3d627744d95d51b862afc13799251831b3611ae436c452b54cdf5c4e78b361a396ae183e8b4c34519e895e623c00</code>: is the hex-encoded signed server key id.</p>

<p>If session was successful, HTTP response code is 200 and body is the json object, containing hex-encoded <code>decrypted_secret</code>, <code>common_point</code> and <code>decrypt_shadows</code> fields:
<code>json
{&quot;decrypted_secret&quot;:&quot;0x88adde1841690af21700e6ff37b8786733cede2ed2faf703f9d5d1a625fd45eb7e5e6efc3800d23482cbf8f1eead192b3123326aa5434c56bae2f99f3f7ca5bf&quot;,&quot;common_point&quot;:&quot;0x2e350d872aef36f0baaf53c0b8b227240814e200e649493948e715487e09ac25957d269f97cd110e836ac48443f217c6a1ce443eecb51df8b1218c0558bd65a2&quot;,&quot;decrypt_shadows&quot;:[&quot;0x045f2f68a55d9823c5d618eda6e6687e1d16cb255ec9b4e8e91cee7910e0662e7fb696aa58cf141c44e1d26f7888cd2f3cdc817aa42ce719c2fae6ca5ae58655d161d97b791dd4734ffdd83920980107bf9f07cf49e69680068f490084e11ecd6f344d12bdfe1620ce2e36e5a77086970c9a20192e29fe8b64024ee2cd8eb48bd78595e5da81096f7f2e4165f85719b97e&quot;,&quot;0x04df05a7ae021b111777318f94ba677ed1e2b4857a3209acae25ca6a628dfe9f5f28aec46e528fd9ac8d35eb1e506851f699cb3715738106e226a4a4ab820af9310e059904a24e5851f7e28e163c35a0803ba13e4d3de9f7bea3aef94c63540193c89402080cde36aab7117b7918a11cb184bf40a08ab59a12d25a15ae581731fff1dba5889ab3b7f24e7b54d74538e342&quot;]}
</code></p>

<p>If error has occurred during session, HTTP response code is in errors range and body is the description of the error:
<code>
&quot;\&quot;Access denied\&quot;&quot;
</code></p>

<p>To reconstruct document key, Secret Store client must pass values of these fields to <code>secretstore_shadowDecrypt</code> RPC.</p>

<p>Implementation is based on <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.124.4128&amp;rank=1">ECDKG: A Distributed Key Generation Protocol Based on Elliptic Curve Discrete Logarithm</a>.</p>
<h3 id='document-key-retrieval-session'>Document key retrieval session</h3>
<p>During document key shadow retrieval session, document key is not reconstructed on any node. But it requires Secret Store client either to have an access to Parity RPCs, or to run some EC calculations to decrypt the document key. It is possible to run lighter version of this session, which returns final document key (though, encrypted with requester public key) if you have enough trust in Secret Store nodes.</p>

<p>To run this session, you will need to prepare following parameters:
- server key id: the id of previously generated server key, to which document key has been bound;
- server key id signature: it is the server key id, signed with the private key of requester, having access to the server key.</p>

<p>To run session, execute the following command:
<code>
curl http://localhost:8082/0000000000000000000000000000000000000000000000000000000000000000/de12681e0b8f7a428f12a6694a5f7e1324deef3d627744d95d51b862afc13799251831b3611ae436c452b54cdf5c4e78b361a396ae183e8b4c34519e895e623c00
</code></p>

<p>Here:
- <code>http://localhost:8082</code>: is the address on which node is listening for incoming requests;
- <code>0000000000000000000000000000000000000000000000000000000000000000</code>: is the hex-encoded server key id;
- <code>de12681e0b8f7a428f12a6694a5f7e1324deef3d627744d95d51b862afc13799251831b3611ae436c452b54cdf5c4e78b361a396ae183e8b4c34519e895e623c00</code>: is the hex-encoded signed server key id.</p>

<p>If session was successful, HTTP response code is 200 and body is the hex-encoded document key, encrypted with requester public key (ECIES encryption is used):
<code>
&quot;0x04990dbe0a4bd6ade23a588ca94c8ba1961a512129b62c23b2a5984ee58e6a925115f7681168909f45a33d7ffe8b8994416b6a707a8838c6c5bfc2d332cfa0fdeb0d1bb0c098d4e7ea690d76abbfc28483665bf00aff8932f6b557efc232ed229709a9cd583bc25543ec2414c719524fa9e73b813c4258e9eb5e8fb95480175d4be89869c094590bf680783dd85da20856da3980f0d2245c4f6b2faa2c28645c355bb082f8759ecaa16b536ff483768d26&quot;
</code>
If error has occurred during session, HTTP response code is in errors range and body is the description of the error:
<code>
&quot;\&quot;Access denied\&quot;&quot;
</code></p>

<p>Implementation is based on <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.124.4128&amp;rank=1">ECDKG: A Distributed Key Generation Protocol Based on Elliptic Curve Discrete Logarithm</a>.</p>
<h3 id='schnorr-signing-session'>Schnorr signing session</h3>
<p>For computing Schnorr signature of given message hash, you will need to prepare following parameters:
- server key id: the id of previously generated server key;
- server key id signature: it is the server key id, signed with the private key of requester, having access to the server key;
- message hash: is the 256-bit hash of the message that is need to be signed.</p>

<p>To run session, execute the following command:
<code>
curl http://localhost:8082/schnorr/0000000000000000000000000000000000000000000000000000000000000000/de12681e0b8f7a428f12a6694a5f7e1324deef3d627744d95d51b862afc13799251831b3611ae436c452b54cdf5c4e78b361a396ae183e8b4c34519e895e623c00/0000000000000000000000000000000000000000000000000000000000000001
</code></p>

<p>Here:
- <code>http://localhost:8082</code>: is the address on which node is listening for incoming requests;
- <code>0000000000000000000000000000000000000000000000000000000000000000</code>: is the hex-encoded server key id;
- <code>de12681e0b8f7a428f12a6694a5f7e1324deef3d627744d95d51b862afc13799251831b3611ae436c452b54cdf5c4e78b361a396ae183e8b4c34519e895e623c00</code>: is the hex-encoded signed server key id;
- <code>0000000000000000000000000000000000000000000000000000000000000001</code>: is the message hash to be signed.</p>

<p>If session was successful, HTTP response code is 200 and body is the hex-encoded Schnorr signature (serialized as <code>c || s</code>), encrypted with requester public key (ECIES encryption is used):
<code>
&quot;0x0410fe210ffdd38611b252e24c61b610d6ea8ec70f9f7186184441871839562cc18c94174af0c804973ce88a6f07ec7604b4b91821a6ca68ca348d16cd647fba494f8132ff36ad4654abd5cba6fb1fd98cacc12aaf3a0fe70010be91f5ab7b69db8f80e528be3baba70341721d6058ad66665363033f0cee963476da746e843d4006170ab549fa82f14eec7b420d542c3415a61fc3075f39e1529bc4e6f54f1170496393485f6ef271ad8b587c8fae8a18&quot;
</code>
If error has occurred during session, HTTP response code is in errors range and body is the description of the error:
<code>
&quot;\&quot;Access denied\&quot;&quot;
</code></p>

<p>Implementation is based on <a href="https://www.researchgate.net/publication/224386852_Efficient_multi-party_digital_signature_using_adaptive_secret_sharing_for_low-power_devices_in_wireless_networksPLEASE_REFERENCE_IN_YOUR_PAPERS">Efficient Multi-Party Digital Signature using Adaptive Secret Sharing for Low-Power Devices in Wireless Networks</a>.</p>
<h3 id='ecdsa-signing-session'>ECDSA signing session</h3>
<p>For computing ECDSA signature of given message hash, you will need to prepare following parameters:
- server key id: the id of previously generated server key;
- server key id signature: it is the server key id, signed with the private key of requester, having access to the server key;
- message hash: is the 256-bit hash of the message that is need to be signed.</p>

<p>To run session, execute the following command:
<code>
curl http://localhost:8082/ecdsa/0000000000000000000000000000000000000000000000000000000000000000/de12681e0b8f7a428f12a6694a5f7e1324deef3d627744d95d51b862afc13799251831b3611ae436c452b54cdf5c4e78b361a396ae183e8b4c34519e895e623c00/0000000000000000000000000000000000000000000000000000000000000001
</code></p>

<p>Here:
- <code>http://localhost:8082</code>: is the address on which node is listening for incoming requests;
- <code>0000000000000000000000000000000000000000000000000000000000000000</code>: is the hex-encoded server key id;
- <code>de12681e0b8f7a428f12a6694a5f7e1324deef3d627744d95d51b862afc13799251831b3611ae436c452b54cdf5c4e78b361a396ae183e8b4c34519e895e623c00</code>: is the hex-encoded signed server key id;
- <code>0000000000000000000000000000000000000000000000000000000000000001</code>: is the message hash to be signed.</p>

<p>If session was successful, HTTP response code is 200 and body is the hex-encoded ECDSA signature (serialized as <code>r || s || v</code>), encrypted with requester public key (ECIES encryption is used):
<code>
&quot;0x0410fe210ffdd38611b252e24c61b610d6ea8ec70f9f7186184441871839562cc18c94174af0c804973ce88a6f07ec7604b4b91821a6ca68ca348d16cd647fba494f8132ff36ad4654abd5cba6fb1fd98cacc12aaf3a0fe70010be91f5ab7b69db8f80e528be3baba70341721d6058ad66665363033f0cee963476da746e843d4006170ab549fa82f14eec7b420d542c3415a61fc3075f39e1529bc4e6f54f1170496393485f6ef271ad8b587c8fae8a18&quot;
</code>
If error has occurred during session, HTTP response code is in errors range and body is the description of the error:
<code>
&quot;\&quot;Access denied\&quot;&quot;
</code></p>

<p><em>(possibly to be reconsidered)</em> Please note, that when generating key to be used in this session, choose threshold <code>t</code> so that the following is always true <code>2*t &lt; N</code>.</p>

<p>Implementation is based on <a href="https://www.researchgate.net/publication/4205262_A_robust_threshold_elliptic_curve_digital_signature_providing_a_new_verifiable_secret_sharing_scheme">A robust threshold elliptic curve digital signature providing a new verifiable secret sharing scheme</a>.</p>
